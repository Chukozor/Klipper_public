[gcode_macro _AUTO_BED_MESH_CALIBRATE]
description: _AUTO_BED_MESH_CALIBRATE S={temperature du bed} [D=0, pour ne pas drop la sonde],  le firmware restart dans a la fin de cette macro
gcode:
  G90  # absolute positioning coordinates
  {% set S = params.S|float|round|int %}
  M190 S{S} # wait for bed to reach temperature
  Z_TILT_ADJUST D=0 # HOME all axis AND check the tilt AND KEEP THE PROBE due to the rename_existing, and keep the probe
  # G28 STAY # home all axis AND KEEP THE PROBE due to the rename_existing
  BED_MESH_CALIBRATE_ORIGINAL PROFILE=meshbed_{S}deg   # etablit la mesh pour cette temperature et le stocke dans le fichier de config
  G0 Z25 F600           # raise bed to 25
  {% if params.D is defined %}
    {% set dropoff = params.D|string %}
    {% if dropoff != "0" %}
      _EUCLID_DROPOFF
    {% endif %}
  {% else %}
    _EUCLID_DROPOFF
  {% endif %}
  SAVE_CONFIG  # le firmware restart ici


[gcode_macro MAGIC_BEDMESH]
description : check si la mesh a cette temperature existe, si oui elle la charge et on attend que le bed atteigne cette temperature, sinon elle va etablir la mesh a cette temperature, puis reboot. Usage : MAGIC_BEDMESH S=(temperature)
gcode:
  G90  # absolute positioning coordinates
  {% if params.S is defined %}
    {% set S = params.S|float|round|int|string %}
    {% set temp_bed = params.S|float|round|int %}
    {% if temp_bed != 0 %}
      {% set STRR = "bed_mesh meshbed_" + S + "deg" %}
      {% if printer.configfile.config[STRR] is defined %}
        M104 S100       # Start heating extruder without waiting for it
        M106 S64        # set fan at 45/255
        M190 S{S} # wait for bed to reach temperature
        Z_TILT_ADJUST D=0 # HOME all axis AND check the tilt AND KEEP THE PROBE due to the rename_existing, and keep the probe
        BED_MESH_PROFILE LOAD=meshbed_{S}deg
      {% else %}
        {action_respond_info("Pas de mesh pour cette temperature, donc lancement d'un _AUTO_BED_MESH_CALIBRATE")}
        _AUTO_BED_MESH_CALIBRATE S={S} D=0
      {% endif %}
    {% else %}
      Z_TILT_ADJUST D=0 # HOME all axis AND check the tilt AND KEEP THE PROBE due to the rename_existing, and keep the probe
    {% endif %}
    G28 # Home and drop the probe here (necessaire ici)
  {% else %}
    {action_raise_error("Merci de definir une temperature")}
  {% endif %}
  
  
[gcode_macro OVERWRITE_MAGIC_BEDMESH]
description : check si la mesh a cette temperature existe, si oui elle la bute et la refait en faisant un overwritte sinon elle va etablir la mesh a cette temperature, puis reboot. Usage : MAGIC_BEDMESH S=(temperature)
gcode:
  G90  # absolute positioning coordinates
  {% if params.S is defined %}
    {% set S = params.S|float|round|int|string %}
    {% set temp_bed = params.S|float|round|int %}
    {% if temp_bed != 0 %}
      {% set STRR = "bed_mesh meshbed_" + S + "deg" %}
      {% if printer.configfile.config[STRR] is defined %}
        {action_respond_info("la mesh existe pour cette temperature, donc on l'ecrase et on lance un _AUTO_BED_MESH_CALIBRATE")}
        BED_MESH_PROFILE REMOVE=meshbed_{S}deg
        _AUTO_BED_MESH_CALIBRATE S={S} D=0 # le firmware restart dans a la fin de cette macro
      {% else %}
        {action_respond_info("Pas de mesh pour cette temperature, donc lancement d'un _AUTO_BED_MESH_CALIBRATE")}
        _AUTO_BED_MESH_CALIBRATE S={S} D=0
      {% endif %}
    {% else %}
      Z_TILT_ADJUST D=0 # HOME all axis AND check the tilt AND KEEP THE PROBE due to the rename_existing, and keep the probe
    {% endif %}
    G28 # Home and drop the probe here (necessaire ici)
  {% else %}
    {action_raise_error("Merci de definir une temperature")}
  {% endif %}