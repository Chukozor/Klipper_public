[gcode_macro DUMP_PARAMETER]
description: Debug: Print entries of the printer object
gcode:
  {% set config = True if params.C or params.S else False %}
  {% set path = 'config'   if params.C 
          else 'settings' if params.S %}
  {% set search = params.C if params.C
            else params.S if params.S
            else params.P if params.P %}
  {% set out = [] %}
  {% for name1 in printer|sort %}
    {% if config %} ; print the searched printer.configfile[path] parameter
      {% if name1 is in ['configfile'] %}
        {% for name2 in printer[name1][path]|sort %}
          {% if name2 is in [search] %}
            {% for name3, value in printer[name1][path][name2].items()|sort %}
              {% set _dummy = out.append("printer.configfile.%s['%s'].%s = %s" % 
                          (path, name2, name3, value)) %}
            {% endfor %}
          {% endif %}
        {% endfor %}
      {% endif %}
    {% else %}
      {% for name2, value in printer[name1].items()|sort %} ; search for anything expext printer.configfile
        {% if search is not defined and name1 is not in ['configfile'] %} ; print all printer. parameter
          {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
        {% elif search is defined and name1 is in [search] %} ; print the searched printer. parameter
          {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
        {% endif %}
      {% endfor %}
    {% endif %}
  {% endfor %}
  {% if out|length > 0 %}
    {action_respond_info(out|join("\n"))}
  {% else %}
    {action_respond_info("Nothing found for \"DUMP_PARAMETER %s\"" % rawparams)}
  {% endif %}

[gcode_macro TEST_DUMP] # MEGA UTILE POUR CONNAITRE LE NOM DES VARIABLES DANS KLIPPER
gcode:
  {action_respond_info("%s" % printer.configfile.settings.z_tilt.z_positions[1][0]|string)}


[gcode_macro SHUTDOWN_MACHINE]
gcode:
  {action_call_remote_method("shutdown_machine")}


[gcode_macro _CENTER_NOZZLE]
description: puts the nozzle at the center of the accessible X/Y values (regarding steppers conf)
gcode:
  {% if "xyz" in printer.toolhead.homed_axes %}
    {% set X_Center = (printer.configfile.config["stepper_x"]["position_max"]|float)/2|int %}
    {% set Y_Center = (printer.configfile.config["stepper_y"]["position_max"]|float)/2|int %}
    G1 X{X_Center} Y{Y_Center} F6000
    {action_respond_info("cariage is now at center of the bed")}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}


[gcode_macro BIG_SPEED_TEST]
gcode:
  {% if params.H is defined %}
    {% set homming = params.H|string %}
    {% if homming != "0" %}
      G28 X
    {% endif %}
  {% endif %}
  {% set F_S = params.S|float|round|int %} # dans S saisir la vitesse en mm/s du deplacement
  {% set F_S = (F_S*60)|float|round|int %}
  {% set margeX = 5 %}
  {% set margeY = 5 %}
  {% set X_min = (printer.configfile.config["stepper_x"]["position_min"]|float) + margeX|int %}
  {% set X_max = 329 - margeX|int %}
  {% set Y_min = (printer.configfile.config["stepper_y"]["position_min"]|float) + margeY|int %}
  {% set Y_max = (printer.configfile.config["stepper_y"]["position_max"]|float) - margeY|int %}
  {% set X_Center = (printer.configfile.config["stepper_x"]["position_max"]|float)/2|int %}
  {% set Y_Center = (printer.configfile.config["stepper_y"]["position_max"]|float)/2|int %}
  # {% set A = [X_min,Y_max] %}
  # {% set B = [X_min,Y_min] %}
  # {% set C = [X_max,Y_min] %}
  # {% set D = [X_max,Y_max] %}
  {% set paths = {'A': [X_min, Y_max], 'B': [X_min, Y_min], 'C': [X_max,Y_min], 'D': [X_max,Y_max], 'E': [X_Center,Y_Center]} %}
  {% set pathpoints = params.PATH.split(',') %}
  {% if params.NB is defined %}
    {% set NB = params.NB|float|round|int %}
  {% else %}
    {% set NB = 1|int %}
  {% endif %}
  {% for osef in range(NB) %}
    {% for currentpoint in pathpoints %}
      G90
      G1 X{paths[currentpoint][0]} Y{paths[currentpoint][1]} F{F_S}
    {% endfor %}
  {% endfor %}
  G1 X{X_Center} Y{Y_Center} F{F_S}

  #  A -> -> -> -> -> -> D  
  #  |                  /\
  # \/                   |
  #  |                  /\
  # \/        E          |
  #  |                  /\
  # \/                   |
  #  B -> -> -> -> -> -> C

# A,B,C,D,A,B,C,D,A,E,D,A,E,D,A,E,B,A,E,B,A,B,E,C,B,E,C,D,E,C,D,E,C,D,E,A,D,E,A,B,E,A,B,E,A,B,C,E,B,C,E,A,E,D,E,C,E,B,E,A,E,D,E,D,A,E,C,B,E
  #advice Xon : use   { action_respond_info() } to debug (don't know how to use it but keep it here for futur uses)



[gcode_macro SMALL_SPEED_TEST]
gcode:
  {% if params.H is defined %}
    {% set homming = params.H|string %}
    {% if homming != "0" %}
      G28 X
    {% endif %}
  {% endif %}
  {% set F_S = params.S|float|round|int %} # dans S saisir la vitesse en mm/s du deplacement
  {% set F_S = (F_S*60)|float|round|int %}
  {% if params.SIZE_X is defined %}
    {% set sizeX = params.SIZE_X|float|int %}
    {% if sizeX > 100 or sizeX < -100 %}
      {% set sizeX = 100 %}
      {action_respond_info("valeur de X trop grande donc mise a 100")}
    {% endif %}
  {% else %}
    {% set sizeX = 30 %}
  {% endif %}
  {% if params.SIZE_Y is defined %}
    {% set sizeY = params.SIZE_Y|float|int %}
    {% if sizeY > 100 or sizeY < -100 %}
      {% set sizeY = 100 %}
      {action_respond_info("valeur de Y trop grande donc mise a 100")}
    {% endif %}
  {% else %}
    {% set sizeY = 30 %}
  {% endif %}
  {% set X_Center = (printer.configfile.config["stepper_x"]["position_max"]|float)/2|int %}
  {% set Y_Center = (printer.configfile.config["stepper_y"]["position_max"]|float)/2|int %}
  {% set X_min = X_Center - sizeX/2|int %}
  {% set X_max = X_Center + sizeX/2|int %}
  {% set Y_min = Y_Center - sizeY/2|int %}
  {% set Y_max = Y_Center + sizeY/2|int %}
  # {% set A = [X_min,Y_max] %}
  # {% set B = [X_min,Y_min] %}
  # {% set C = [X_max,Y_min] %}
  # {% set D = [X_max,Y_max] %}
  {% set paths = {'A': [X_min, Y_max], 'B': [X_min, Y_min], 'C': [X_max,Y_min], 'D': [X_max,Y_max], 'E': [X_Center,Y_Center]} %}
  {% set pathpoints = params.PATH.split(',') %}
  {% if params.NB is defined %}
    {% set NB = params.NB|float|round|int %}
  {% else %}
    {% set NB = 1|int %}
  {% endif %}
  {% for osef in range(NB) %}
    {% for currentpoint in pathpoints %}
      G90
      G1 X{paths[currentpoint][0]} Y{paths[currentpoint][1]} F{F_S}
    {% endfor %}
  {% endfor %}
  G1 X{X_Center} Y{Y_Center} F{F_S}


[gcode_macro GRAISSAGE_XY]
gcode:
  {% if params.H is defined %}
    {% set homming = params.H|string %}
    {% if homming != "0" %}
      G28 X
    {% endif %}
  {% endif %}
  # {% set F_S = params.S|float|round|int %} # dans S saisir la vitesse en mm/s du deplacement
  {% set F_S = 150 %}
  {% set F_S = (F_S*60)|float|round|int %}
  {% set margeX = 1 %}
  {% set margeY = 1 %}
  {% set X_min = (printer.configfile.config["stepper_x"]["position_min"]|float) + margeX|int %}
  {% set X_max = (printer.configfile.config["stepper_x"]["position_max"]|float) - margeX|int %}
  # {% set X_max = 329 - margeX|int %}
  {% set Y_min = (printer.configfile.config["stepper_y"]["position_min"]|float) + margeY|int %}
  {% set Y_max = (printer.configfile.config["stepper_y"]["position_max"]|float) - margeY|int %}
  {% set X_Center = (printer.configfile.config["stepper_x"]["position_max"]|float)/2|int %}
  {% set Y_Center = (printer.configfile.config["stepper_y"]["position_max"]|float)/2|int %}
  # {% set A = [X_min,Y_max] %}
  # {% set B = [X_min,Y_min] %}
  # {% set C = [X_max,Y_min] %}
  # {% set D = [X_max,Y_max] %}
  {% set paths = {'A': [X_Center, Y_max], 'B': [X_Center, Y_min], 'C': [X_min,Y_Center], 'D': [X_max,Y_Center], 'E': [X_Center,Y_Center]} %}
  {% set PATH = "A,B,A,B,A,B,E,C,D,C,D,C,D,E" %}
  {% set pathpoints = PATH.split(',') %}
  # 
  {% if params.NB is defined %}
    {% set NB = params.NB|float|round|int %}
  {% else %}
    {% set NB = 1|int %}
  {% endif %}
  {% for osef in range(NB) %}
    {% for currentpoint in pathpoints %}
      G90
      G1 X{paths[currentpoint][0]} Y{paths[currentpoint][1]} F{F_S}
    {% endfor %}
  {% endfor %}
  G1 X{X_Center} Y{Y_Center} F{F_S}

[servo my_servo]
pin: PB6
#   PWM output pin controlling the servo. This parameter must be
#   provided.
maximum_servo_angle: 270
#   The maximum angle (in degrees) that this servo can be set to. The
#   default is 180 degrees.
minimum_pulse_width: 0.0005
#   The minimum pulse width time (in seconds). This should correspond
#   with an angle of 0 degrees. The default is 0.001 seconds.
maximum_pulse_width: 0.0025
#   The maximum pulse width time (in seconds). This should correspond
#   with an angle of maximum_servo_angle. The default is 0.002
#   seconds.
# initial_angle: 0
#   Initial angle (in degrees) to set the servo to. The default is to
#   not send any signal at startup.
#initial_pulse_width:
#   Initial pulse width time (in seconds) to set the servo to. (This
#   is only valid if initial_angle is not set.) The default is to not
#   send any signal at startup.
#
# command : SET_SERVO SERVO=my_servo ANGLE=5.3