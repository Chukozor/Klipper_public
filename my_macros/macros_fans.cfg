[fan]
# Print cooling fan. Here the CPAP
pin: !PA8
max_power: 0.3
#   The maximum power (expressed as a value from 0.0 to 1.0) that the
#   pin may be set to. The value 1.0 allows the pin to be set fully
#   enabled for extended periods, while a value of 0.5 would allow the
#   pin to be enabled for no more than half the time. This setting may
#   be used to limit the total power output (over extended periods) to
#   the fan. If this value is less than 1.0 then fan speed requests
#   will be scaled between zero and max_power (for example, if
#   max_power is .9 and a fan speed of 80% is requested then the fan
#   power will be set to 72%). The default is 1.0.
off_below: 0.25
#   The minimum input speed which will power the fan (expressed as a
#   value from 0.0 to 1.0). When a speed lower than off_below is
#   requested the fan will instead be turned off. This setting may be
#   used to prevent fan stalls and to ensure kick starts are
#   effective. The default is 0.0.
kick_start_time: 0.150
#   Time (in seconds) to run the fan at full speed when either first
#   enabling or increasing it by more than 50% (helps get the fan
#   spinning). The default is 0.100 seconds.

# [fan]
# # Print cooling fan. Here the CPAP
# pin: !PA8
# max_power: 0.5
# #   The maximum power (expressed as a value from 0.0 to 1.0) that the
# #   pin may be set to. The value 1.0 allows the pin to be set fully
# #   enabled for extended periods, while a value of 0.5 would allow the
# #   pin to be enabled for no more than half the time. This setting may
# #   be used to limit the total power output (over extended periods) to
# #   the fan. If this value is less than 1.0 then fan speed requests
# #   will be scaled between zero and max_power (for example, if
# #   max_power is .9 and a fan speed of 80% is requested then the fan
# #   power will be set to 72%). The default is 1.0.
# off_below: 0.145
# #   The minimum input speed which will power the fan (expressed as a
# #   value from 0.0 to 1.0). When a speed lower than off_below is
# #   requested the fan will instead be turned off. This setting may be
# #   used to prevent fan stalls and to ensure kick starts are
# #   effective. The default is 0.0.
# kick_start_time: 0.150
# #   Time (in seconds) to run the fan at full speed when either first
# #   enabling or increasing it by more than 50% (helps get the fan
# #   spinning). The default is 0.100 seconds.



[heater_fan NoctuaFan]
#################### Heater cooling fans (one may define any number of sections with a "heater_fan" prefix). A "heater fan" is a fan that will be enabled whenever its associated heater is active. By default, a heater_fan has a shutdown_speed equal to max_power.
####################
pin: PE5
max_power: 1
#shutdown_speed:
#cycle_time:
#hardware_pwm:
kick_start_time: 0.5
#off_below:
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#enable_pin:
#   See the "fan" section for a description of the above parameters.
heater: extruder
#   Name of the config section defining the heater that this fan is
#   associated with. If a comma separated list of heater names is
#   provided here, then the fan will be enabled when any of the given
#   heaters are enabled. The default is "extruder".
heater_temp: 50.0
#   A temperature (in Celsius) that the heater must drop below before
#   the fan is disabled. The default is 50 Celsius.
fan_speed: 1.0
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when its associated heater is enabled. The default
#   is 1.0


[heater_fan OctopusFans]
#################### Heater cooling fans (one may define any number of sections with a "heater_fan" prefix). A "heater fan" is a fan that will be enabled whenever its associated heater is active. By default, a heater_fan has a shutdown_speed equal to max_power.
####################
pin: PD12
max_power: 1
#shutdown_speed:
#cycle_time:
#hardware_pwm:
kick_start_time: 0.5
#off_below:
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#enable_pin:
#   See the "fan" section for a description of the above parameters.
heater: extruder
#   Name of the config section defining the heater that this fan is
#   associated with. If a comma separated list of heater names is
#   provided here, then the fan will be enabled when any of the given
#   heaters are enabled. The default is "extruder".
heater_temp: 50.0
#   A temperature (in Celsius) that the heater must drop below before
#   the fan is disabled. The default is 50 Celsius.
fan_speed: 0.7
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when its associated heater is enabled. The default
#   is 1.0

[heater_fan MoteursXY]
#################### Heater cooling fans (one may define any number of sections with a "heater_fan" prefix). A "heater fan" is a fan that will be enabled whenever its associated heater is active. By default, a heater_fan has a shutdown_speed equal to max_power.
####################
pin: PD15
max_power: 1
#shutdown_speed:
#cycle_time:
#hardware_pwm:
kick_start_time: 0.5
#off_below:
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#enable_pin:
#   See the "fan" section for a description of the above parameters.
heater: extruder
#   Name of the config section defining the heater that this fan is
#   associated with. If a comma separated list of heater names is
#   provided here, then the fan will be enabled when any of the given
#   heaters are enabled. The default is "extruder".
heater_temp: 50.0
#   A temperature (in Celsius) that the heater must drop below before
#   the fan is disabled. The default is 50 Celsius.
fan_speed: 1
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when its associated heater is enabled. The default
#   is 1.0



# [controller_fan OctopusFans]
# #################### Controller cooling fan (one may define any number of sections with a "controller_fan" prefix).
# #################### A "controller fan" is a fan that will be enabled whenever its associated heater or its associated stepper driver is active. The fan will stop whenever an idle_timeout is reached to ensure no overheating will occur after deactivating a watched component.
# ####################
# pin: PD12
# max_power: 1
# #shutdown_speed:
# #cycle_time:
# #hardware_pwm:
# kick_start_time: 0.5
# #off_below:
# #tachometer_pin:
# #tachometer_ppr:
# #tachometer_poll_interval:
# #enable_pin:
# #   See the "fan" section for a description of the above parameters.
# fan_speed: 1.0
# #   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
# #   will be set to when a heater or stepper driver is active.
# #   The default is 1.0
# idle_timeout: 30
# #   The amount of time (in seconds) after a stepper driver or heater
# #   was active and the fan should be kept running. The default
# #   is 30 seconds.
# #idle_speed:
# #   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
# #   will be set to when a heater or stepper driver was active and
# #   before the idle_timeout is reached. The default is fan_speed.
# heater: extruder
# stepper: stepper_x,stepper_y,stepper_z
# #   Name of the config section defining the heater/stepper that this fan
# #   is associated with. If a comma separated list of heater/stepper names
# #   is provided here, then the fan will be enabled when any of the given
# #   heaters/steppers are enabled. The default heater is "extruder", the
# #   default stepper is all of them.





[heater_fan MosfetFan]
#################### A "heater fan" is a fan that will be enabled whenever its associated heater is active. By default, a heater_fan has a shutdown_speed equal to max_power.
####################
pin: PD13
max_power:1
#shutdown_speed:
#cycle_time:
#hardware_pwm:
kick_start_time:0.5
#off_below:
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#enable_pin:
#   See the "fan" section for a description of the above parameters.
heater: extruder
#   Name of the config section defining the heater that this fan is
#   associated with. If a comma separated list of heater names is
#   provided here, then the fan will be enabled when any of the given
#   heaters are enabled. The default is "extruder".
#heater_temp: 50.0
#   A temperature (in Celsius) that the heater must drop below before
#   the fan is disabled. The default is 50 Celsius.
fan_speed: 0.7
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when its associated heater is enabled. The default
#   is 1.0

# [fan_generic MosfetFanTests]
# pin: PD13
# max_power:1
# #shutdown_speed:
# #cycle_time:
# #hardware_pwm:
# kick_start_time: 0.5
# #off_below:
# #tachometer_pin:
# #tachometer_ppr:
# #tachometer_poll_interval:
# #enable_pin:
# #   See the "fan" section for a description of the above parameters.
# # USAGE :
# # SET_FAN_SPEED FAN=config_name SPEED=<speed> This command sets the speed of a fan. "speed" must be between 0.0 and 1.0.


[fan_generic MouserFansTests]
pin: PD14
max_power:1
#shutdown_speed:
#cycle_time:
#hardware_pwm:
kick_start_time: 0.5
#off_below:
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#enable_pin:
#   See the "fan" section for a description of the above parameters.
# USAGE :
# SET_FAN_SPEED FAN=config_name SPEED=<speed> This command sets the speed of a fan. "speed" must be between 0.0 and 1.0.

######################################## FAN OVERRIDE ########################################

[gcode_macro M106]
rename_existing: M106.1
gcode:
    {% if printer['gcode_macro FAN_OVERRIDE'].enabled|int == 0 or 'FORCED' in params %}
      # Let the fan speed change only if override is disabled or the FORCED param is included
      M106.1 S{params.S}
    {% else %}
      # Override is active and not forced, store this setting to be restored later
      {action_respond_info('Not setting fan speed as override is active and speed was not forced')}
      SET_GCODE_VARIABLE MACRO=FAN_OVERRIDE VARIABLE=slicer VALUE={params.S}
    {% endif %}

[gcode_macro M107]
rename_existing: M107.1
gcode:
    {% if printer['gcode_macro FAN_OVERRIDE'].enabled|int != 1 or 'forced' in params %}
      M107.1 S{params.S}
    {% else %}
      {action_respond_info('Not turning off fan as override is active and speed was not forced')}
    {% endif %}

# {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}
# {% set Y_Center = (printer.configfile.config["stepper_y"]["position_max"]|float)/2|int %}
# F{ euclid_probe.move_speed_z_silent*60|float }

[gcode_macro FAN_OVERRIDE]
variable_slicer: 0
variable_enabled: 0
description: Locks the fan to P percent to the specified value and prevents M106 from changing the fan speed unless the forced parameter is provided. On a un pourcentage fourni
gcode:
    {% set speed = params.P|float %}
    {% set the_param_for_m106 = speed /100 * 255 %}# ici y'a pas le *printer.configfile.settings.fan.max_power  
    {% if enabled|int == 0 %}
      # only store the existing fan value if the fan isn't already overritten, so we can restore that speed when cancelled
      SET_GCODE_VARIABLE MACRO=FAN_OVERRIDE VARIABLE=slicer VALUE={ printer.fan.speed / printer.configfile.settings.fan.max_power * 255 }
      # {action_respond_info('slicer takes the value printer.fan.speed * 255 knowing that printer.fan.speed equals %s and that printer.fan.speed * 255 equals %s' % (printer.fan.speed, (printer.fan.speed * 255)))}
      # {action_respond_info('!!! Note that extrusion multiplier was reset from %s%' % (printer.gcode_move.extrude_factor*100)|round(0))}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=FAN_OVERRIDE VARIABLE=enabled VALUE=1
    {action_respond_info('Forcing fan speed to %s percent and ignoring slicer values. Use "M106 forced=1" to set fan speeds. The value used for M106 is %s and ignoring slicer values ' % (speed, the_param_for_m106))}
    # {action_respond_info('Forcing fan speed to a percentage of %s % which is equivalent to set M106 with S %s and ignoring slicer values. Use "M106 forced=1" to set fan speeds.' % (speed, the_param_for_M106))}
    M106 S{the_param_for_m106} forced=1
    
[gcode_macro CANCEL_FAN_OVERRIDE]
description: Returns M106 behaviour to normal, allowing the slicer to set fan speeds again.
gcode:
    {% if printer['gcode_macro FAN_OVERRIDE'].enabled|int != 0 %}
      {action_respond_info('Re-enabling slicer fan speeds and setting to last value of %s' % printer['gcode_macro FAN_OVERRIDE'].slicer)}
      SET_GCODE_VARIABLE MACRO=FAN_OVERRIDE VARIABLE=enabled VALUE=0
      M106 S{printer['gcode_macro FAN_OVERRIDE'].slicer}
      SET_GCODE_VARIABLE MACRO=FAN_OVERRIDE VARIABLE=slicer VALUE=0
    {% else %}
      {action_respond_info('Fan override is not active')}
    {% endif %}
#
#
#
# if you're not familiar with adding macros, create a new file in your klipper config directory named fan_override.cfg or similar, paste the following into it and save it, then at the bottom of your printer.cfg (but before the huge comment that starts with SAVE_CONFIG if you have that) add [include fan_override.cfg]

# to make it run it adds a new command FAN_OVERRIDE which you can call with FAN_OVERRIDE P=0-100, which will then lock M106 unless you call it with forced, like M106 S145 forced. to turn it off call CANCEL_FAN_OVERRIDE and it will set the fan to the last value that M106 was called with (without the forced parameter)

###################################### FIN FAN OVERRIDE ######################################

[gcode_macro _debug_fan]
gcode:
  { action_respond_info('Current printer.fan.speed equals %s, and printer.fan.speed * printer.configfile.settings.fan.max_power equals %s, and printer.fan.speed * printer.configfile.settings.fan.max_power equals * 255 equals %s' % (printer.fan.speed, printer.fan.speed / printer.configfile.settings.fan.max_power, printer.fan.speed / printer.configfile.settings.fan.max_power * 255)) }


[gcode_macro _debug_max_machin]
gcode:
  { action_respond_info('printer.configfile.settings.fan.max_power equals %s, and multiplied by 255 equals M106 S%s' % (printer.configfile.settings.fan.max_power, 255 * printer.configfile.settings.fan.max_power)) }