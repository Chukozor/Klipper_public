
#
# the printer.cfg-snip.txt has the following config settings 
# # 
# #...
# # ad this include statement at the head of the config file
# [include euclid.cfg]
# #
#
# #
# # enable enable_force_move to enable FORCE_MOVE and SET_KINEMATIC_POSIITION
# enable_force_move:true
# # ...
#
# It is assumed that there is a seperate Z-endstop that is used to home Z
# IF YOU ARE USING PROBE AS ENDSTOP AND PROBE homing_overide must be altered
#
# some configurtions may need FORCE_MOVE enabled for kinematic position functionS
# https://www.klipper3d.org/Config_Reference.html?h=force_move#force_move
#
# Movement Locations:
#    Users need to identify these locations and customize for their deployment: 
#       Pre-flight position X100 Y20 located to ensure clear travel path to dock
#       Dock Adjacent position X30 Y0 to provide short lateral travel for pickup and swipe off
#       Probe pickup over dock X0 Y0
#       Dock exit Position X0 Y40
#       Probe Ready Position X150 Y0 center of bed
#
# the above list of coordiantes get used in the movement macros below
#

[gcode_macro G28]
rename_existing: G28.1
gcode:
  {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}
  {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
  {% set home_x = 'X' in params or home_all %}
  {% set home_y = 'Y' in params or home_all %}
  {% set home_z = 'Z' in params or home_all %}
  {% set home_xy = home_x or home_y %}
  {% set homed_axes = printer.toolhead.homed_axes %}
  # {% set home_xy = 'z' not in homed_axes or 'y' not in homed_axes %}
  # 
  SET_SKEW CLEAR=1
  # 
  {% if 'z' not in homed_axes %}
    G90 ; absolute coordinates
    SET_KINEMATIC_POSITION Z=0
  {% endif %}
  G91 ; relative coordinates
  G0 Z{euclid_probe.bed_security_before_homing} F{ euclid_probe.move_speed_z_silent*60|float }
  G90 ; absolute coordinates
  # 
  {% if 'X' in params or 'Y' in params %} # s'il y a X ou Y ecrits noir sur blanc
    G28.1 Y
    G28.1 X 
    {% if 'Z' in params %} # s'il y a Z ecrit noir sur blanc
      EUClID_PICKUP_AND_HOME_Z
      {% if 'STAY' not in params %} # to dropoff the euclid probe
        _EUCLID_DROPOFF
      {% endif %}
      G0 X{ euclid_probe.position_safe[0] } Y{ euclid_probe.position_safe[1] } F{ euclid_probe.move_speed_exit*60|float }
    {% endif %}
  {% else %} # donc il y a forcement le Z a homer : soit il est ecrit, soit c'est un G28 qui home tous les axes
    G28.1 Y
    G28.1 X
    EUClID_PICKUP_AND_HOME_Z
    {% if 'STAY' not in params %} # to dropoff the euclid probe
      _EUCLID_DROPOFF
    {% endif %}
    G0 X{ euclid_probe.position_safe[0] } Y{ euclid_probe.position_safe[1] } F{ euclid_probe.move_speed_exit*60|float }
  {% endif %}

[gcode_macro _MANUEL_SKEW]
description: ATTENTION LIRE LA MACRO
gcode:
  SET_SKEW CLEAR=1
  G90
  SET_KINEMATIC_POSITION X=150 Y=350 Z=51
  G91
  G1 X100 F3600
  G1 Y-100 F3600
  G1 Z-51 F300
  G1 Y-100 F3600
  G1 Z0.1 F300
  G1 X-2 Y2 F3600
  G1 Z-0.1 F300
  G1 X100 F3600
  G1 Z1 F300
  G1 X-100 F3600
  G1 Y100 F3600
  G1 X4 F3600
  # G1 Y3 F3600
  G1 Z50 F300
  G1 X-100 F3600
  G1 Y100 F3600

[gcode_macro _CORRECTION_MANUEL_SKEW]
description: ATTENTION LIRE LA MACRO
gcode:
  SKEW_PROFILE LOAD=bertha
  G90
  SET_KINEMATIC_POSITION X=150 Y=350 Z=51
  G91
  G1 X100 F3600
  G1 Y-100 F3600
  G1 Z-51 F300
  G1 Y-100 F3600
  G1 Z0.1 F300
  G1 X-2 Y2 F3600
  G1 Z-0.1 F300
  G1 X100 F3600
  G1 Z1 F300
  G1 X-100 F3600
  G1 Y100 F3600
  G1 X4 F3600
  # G1 Y3 F3600
  G1 Z50 F300
  G1 X-100 F3600
  G1 Y100 F3600

[gcode_macro AUX_SONDE_A_LA_PLACE_DE_LA_BUSE]
description: Executer cette macro et ensuite envoyer des G1 X... Y... et comme ca on voit si la sonde peut aller a ces endroits la. Tres utile pour les options de BED_MESH (mesh_min et mesh_max). Retour a la normale en executant la macro AUX_RESTAURE_BUSE. Precision : les coordonnees affiches sur mainsail en gros (la ou cest habituellement), seront les vraies coordonnees de la sonde.
gcode:
  SAVE_GCODE_STATE NAME=BUSE_MODE
  {% set offsetX = -1*printer.configfile.config["probe"]["x_offset"] | float %}
  {% set offsetY = -1*printer.configfile.config["probe"]["y_offset"] | float %}
  SET_GCODE_OFFSET MOVE=1 X={offsetX} Y={offsetY} MOVE_SPEED=100 # en mm/s
  # RESTORE_GCODE_STATE MOVE=1 NAME=NORMAL_MODE MOVE_SPEED=100 # en mm/s


[gcode_macro AUX_RESTAURE_BUSE]
gcode:
  RESTORE_GCODE_STATE MOVE=0 NAME=BUSE_MODE MOVE_SPEED=100 # en mm/s
  {% set offsetX2 = 1*printer.configfile.config["probe"]["x_offset"] | float %}
  {% set offsetY2 = 1*printer.configfile.config["probe"]["y_offset"] | float %}
  G91
  G1 X{offsetX2} Y{offsetY2} F6000
  G90


[gcode_macro EuclidProbe]
description: config vars for Euclid probe to move to pick up or drop off
## @TODO Replace the coordinates to suit your printer
variable_position_safe:  [ 280, 90 ]
variable_position_exit:       [ 292, 1 ]
variable_position_dock:       [ 354, 1 ]
variable_position_slide:      [ 354, 70 ]
variable_position_nozzle_on_sexbolt:      [ 330.4, 21, 25 ]

# SPEED in mm/s
variable_move_speed_exit:       300
variable_move_speed_slide:      50
variable_move_speed_dropoff:    100
variable_move_speed_connect:    50
variable_move_speed_moderate:   200
variable_move_speed_z_silent:   5
#
variable_bed_clearance: 25
variable_bed_security_before_homing: 10
variable_bed_security_while_homing: 2
# 
variable_move_speeds: 18000
#
## @TODO if your printer has a fixed Z-Endstop that you will use define it here
## @TODO for example Voron Trident
# variable_position_zstop:      [ 150,250 ] # zstop position
## exit/re-entry staging
## clearance between the toolhead and bed when traveling to pick up the probe
## probe dock height
## @TODO If the toolhead can move vertically in relation to the probe dock
## @TODO height(such as attached to the be on a moving-gantry printer like a
## @TODO Voron 2.4), set this to the Z position of the probe dock.
# variable_dock_height: 15
## move speeds in mm/s
## internal state variables; not for configuration!
variable_batch_mode_enabled: False
gcode:
    RESPOND TYPE=command MSG="{ printer['gcode_macro EuclidProbe'] }"


                                                                                      
#  _______________________________________________________________________________________________                                                                                                  
# |                                                                                               |        
# |                                                                                               |   
# |                                                                                               |   
# |                                                                                               |   
# |                                                                                               |   
# |                                                                                               |        
# |                                                                                               |        
# |                                                                                               |        
# |                                                                                               |        
# |                                                                                               |        
# |                                                                                               |        
# |                                                                 * Dock safe slide             |
# |                                                                 X354 Y90 F18000               |                        
# |                                                                 to pick :                     |                        
# |                                                                 to drop :                     |                
# |                                                                                               |        
# |                                                                                               |                                        
# |                                                                                               |        
# |                                                                 * Dock Slide                  |                  
# |                                                                 X354 Y70 F18000               |                       
# |                                                                 to pick :                     |                 
# |                                                                 to drop :                     |                 
# |                                                                                               |        
# |                                                                                               |        
# |                                                                                               |        
# |                                                                                               |                                                                                                                    
# |            * Dock safe Exit           * Dock Exit               * Dock                        |              
# |            X280 Y10                   X292 Y1                   X354 Y1 F3000                 |
# |            to pick : F3000            to pick : F3000           to pick : F3000               |                         
# |            to drop :                  to drop :                 to drop :                     |                               
# |                                                                                               |        
# |                                                                                               |        
# |                                                                                               |        
# |_______________________________________________________________________________________________|
    



[gcode_macro _SEXBOLT_PROBING]
description: config vars to adjust offset after changing nozzle
## @TODO Replace the coordinates to suit your printer
variable_sfgghgf:      [ 330.4, 21, 25 ]
variable_pas_touche_a_cette_valeur_probezoffset: 2.025 # REFERENCE : valeur d'offset qd on regle bien le nozzle
variable_pas_touche_a_cette_valeur_sexboltoffset: 1 #TODO, REFERENCE : valeur de probe qd on sonde le sexbolt le nozzle et offset bien regle de precedemment dans `variable_pas_touche_a_cette_valeur_probezoffset`
variable_batch_mode_enabled: False
gcode:
  # clearing tout ce qui peut perturber le machin
  SET_GCODE_OFFSET Z=0 # reset whatever babystepping you have done
  BED_MESH_CLEAR
  SET_SKEW CLEAR=1
  CLEAR_PAUSE          # clear whatever PAUSE state you may have if you have it
  #fin du nettoyage
  G90
  Z_TILT_ADJUST D=0 # le G28 est fait dedans, et on keep la probe
  G4 P250
  _error_if_probe_not_deployed
  {% set sexbolt = printer["gcode_macro _SEXBOLT_PROBING"] %}
  {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}
  G1 Z{euclid_probe.position_nozzle_on_sexbolt[2]} F{ euclid_probe.move_speed_z_silent*60|float }
  G1 X{euclid_probe.position_nozzle_on_sexbolt[0]} Y{euclid_probe.position_nozzle_on_sexbolt[1]} F{ euclid_probe.move_speed_moderate*60|float }
  PROBE SAMPLES=4 SAMPLES_RESULT=average
  {% set nouvelle_valeur_offset_sexbolt = printer.toolhead.position.z|float %}
  {% set ajustement = nouvelle_valeur_offset_sexbolt - sexbolt.pas_touche_a_cette_valeur_sexboltoffset  %}
  G1 Z25
  SET_GCODE_OFFSET Z_ADJUST={ajustement} MOVE=1
  Z_OFFSET_APPLY_PROBE
  SAVE_CONFIG
  
  
  



[gcode_macro EUClID_PICKUP_AND_HOME_Z]
description: pick up and home with euclid and put the carriage at euclid_probe.bed_clearance after
gcode:
    {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}
    {% set homed_axes = printer.toolhead.homed_axes %}
    {% set home_xy = 'x' not in homed_axes or 'y' not in homed_axes %}
    SET_SKEW CLEAR=1
    G90
    SET_KINEMATIC_POSITION Z=0
    G0 Z{euclid_probe.bed_clearance} F{ euclid_probe.move_speed_z_silent*60|float }    ; raise bed to 25
    {% if home_xy %}
      G28.1 Y
      G28.1 X
    {% endif %}
    _EUCLID_PICKUP_0   # NO MOVE OF THE BED HERE
    {% set X_Center = printer.configfile.settings.z_tilt.z_positions[1][0] | float %}
    {% set Y_Center = (printer.configfile.config["stepper_y"]["position_max"]|float)/2|int %}
    G0 X{X_Center} Y{Y_Center} F12000    ; move to "fake" center #TODO modifier vitesse
    SAVE_GCODE_STATE NAME=NORMAL_MODE
    {% set offsetX = -1*printer.configfile.config["probe"]["x_offset"] | float %}
    {% set offsetY = -1*printer.configfile.config["probe"]["y_offset"] | float %}
    SET_GCODE_OFFSET MOVE=1 X={offsetX} Y={offsetY} MOVE_SPEED=100 # en mm/s
    G28.1 Z                 ; home Z
    G0 Z{euclid_probe.bed_clearance} F{ euclid_probe.move_speed_z_silent*60|float }           ; raise bed to 25
    RESTORE_GCODE_STATE MOVE=1 NAME=NORMAL_MODE MOVE_SPEED=100 # en mm/s

# [gcode_macro AUXILIAIRE_DE_HOMING_2]
# gcode:
#     _EUCLID_PICKUP_0   # NO MOVE OF THE BED HERE
#     {% set X_Center = 184 %}
#     {% set Y_Center = (printer.configfile.config["stepper_y"]["position_max"]|float)/2|int %}
#     G0 X{X_Center} Y{Y_Center} F12000    ; move to "fake" center #TODO modifier vitesse
#     SAVE_GCODE_STATE NAME=NORMAL_MODE
#     {% set offsetX = -1*printer.configfile.config["probe"]["x_offset"] | float %}
#     {% set offsetY = -1*printer.configfile.config["probe"]["y_offset"] | float %}
#     SET_GCODE_OFFSET MOVE=1 X={offsetX} Y={offsetY} MOVE_SPEED=100 # en mm/s
#     G28.1 Z                 ; home Z
#     G0 Z25 F600           ; raise bed to 25
#     RESTORE_GCODE_STATE MOVE=1 NAME=NORMAL_MODE MOVE_SPEED=100 # en mm/s

########################### error_if_probe_deployed ###########################
[gcode_macro _error_if_probe_deployed]
gcode:
  QUERY_PROBE                 ; check probe status
  _do_error_if_probe_deployed  ; logic check to verify probe is not already deployed

[gcode_macro _do_error_if_probe_deployed]
gcode:
    {% if not printer.probe.last_query %}
      {action_raise_error("Euclid Probe is already deployed - Remove and Return it to the dock")}
    {% endif %}


########################### if_probe_deployed BEFORE PICKING IT UP ###########################
[gcode_macro _error_if_probe_deployed_before_picking_it_up]
gcode:
  QUERY_PROBE                 ; check probe status
  _do_error_if_probe_deployed_before_picking_it_up ; logic check to verify probe is not already deployed

[gcode_macro _do_error_if_probe_deployed_before_picking_it_up]
gcode:
    {% if not printer.probe.last_query %}
      {action_respond_info("Euclid Probe is already deployed - BUT NeVERMIND AHAHAHAH")}
    {% endif %}



############################## _EUCLID_PICKUP_0 ############################## # NO MOVE OF THE BED
# Macro to Deploy Bed Probe
[gcode_macro _EUCLID_PICKUP_0] # NO MOVE OF THE BED HERE
gcode:
  G90
  {action_respond_info("Entering EUCLID_PICKUP_0")}
  _error_if_probe_deployed_before_picking_it_up    ; check if the probe is already attached
  _EUCLID_PICKUP_00

# Macro to Deploy Bed Probe # NO MOVE OF THE BED HERE
[gcode_macro _EUCLID_PICKUP_00] # NO MOVE OF THE BED HERE
gcode:
  G90
  {% if printer.probe.last_query %} 
    # NO MOVE OF THE BED HERE
    # USELESS ICI # {% set homed_axes = printer.toolhead.homed_axes %}
    # USELESS ICI # {% set home_xy = 'x' not in homed_axes or 'y' not in homed_axes %}
    # USELESS ICI # {% if home_xy %}
    # USELESS ICI #   G28.1 Y
    # USELESS ICI #   G28.1 X
    # USELESS ICI # {% endif %}
    SET_SKEW CLEAR=1
    {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}
    G0 X{ euclid_probe.position_safe[0] } Y{ euclid_probe.position_safe[1] } F{ euclid_probe.move_speed_exit*60|float }
    G0 X{ euclid_probe.position_exit[0] } Y{ euclid_probe.position_exit[1] } F{ euclid_probe.move_speed_moderate*60|float }
    G4 P250              ;  wait 1/4 second 
    G0 X{ euclid_probe.position_dock[0] } Y{ euclid_probe.position_dock[1] } F{ euclid_probe.move_speed_connect*60|float }
    M400                 ;  wait for moves to finish
    G4 P250              ;  pause 1/4 sec for detection
    G0 X{ euclid_probe.position_slide[0] } Y{ euclid_probe.position_slide[1] } F{ euclid_probe.move_speed_slide*60|float } ;  move out of the dock in a straight line 
    G0 X{ euclid_probe.position_safe[0] } Y{ euclid_probe.position_safe[1] } F{ euclid_probe.move_speed_exit*60|float } ;  move out of the dock in a straight line 
  {% endif %}
  _error_if_probe_not_deployed
  {action_respond_info("Exiting EUCLID_PICKUP_00")}

############################# _error_if_probe_not_deployed #############################

[gcode_macro _error_if_probe_not_deployed]
gcode:
  QUERY_PROBE
  _do_error_if_probe_not_deployed

[gcode_macro _do_error_if_probe_not_deployed]
gcode:
  {% if printer.probe.last_query %}
    {action_raise_error("Euclid Probe failed to deploy!")}
  {% endif %}

################################## _EUCLID_DROPOFF ################################## # NO MOVE OF THE BED

[gcode_macro _EUCLID_DROPOFF] # NO MOVE OF THE BED HERE
gcode:
  G90
  {action_respond_info("Entering EUCLID_DROPOFF")}
  _error_if_probe_not_deployed
  _EUCLID_DROPOFF_0

# Macro to Stow Bed Leveling Probe # NO MOVE OF THE BED HERE
[gcode_macro _EUCLID_DROPOFF_0] # NO MOVE OF THE BED HERE
gcode:
  SET_SKEW CLEAR=1
  G90
  {% if not printer.probe.last_query %} ; the logic on this needs function check
    {% set homed_axes = printer.toolhead.homed_axes %}
    {% set home_xy = 'x' not in homed_axes or 'y' not in homed_axes %}
    {% if home_xy %}
      G28.1 Y
      G28.1 X
    {% endif %}
    {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}
    G0 X{ euclid_probe.position_safe[0] } Y{ euclid_probe.position_safe[1] } F{ euclid_probe.move_speed_exit*60|float }
    G0 X{ euclid_probe.position_slide[0] } Y{ euclid_probe.position_slide[1] } F{ euclid_probe.move_speed_moderate*60|float }
    G4 P250              ;  wait 1/4 second 
    G0 X{ euclid_probe.position_dock[0] } Y{ euclid_probe.position_dock[1] } F{ euclid_probe.move_speed_slide*60|float }
    M400                 ;  wait for moves to finish
    G4 P250              ;  pause 1/4 sec for detection
    G0 X{ euclid_probe.position_exit[0] } Y{ euclid_probe.position_exit[1] } F{ euclid_probe.move_speed_dropoff*60|float }
    G0 X{ euclid_probe.position_safe[0] } Y{ euclid_probe.position_safe[1] } F{ euclid_probe.move_speed_exit*60|float } ;  move out of the dock in a straight line 
  {% endif %}                     ;  exit the if-then loop. was missing in previous versions
  _error_if_probe_deployed         ;  verify that the probe is detached. is corrected error  
  {action_respond_info("Exiting EUCLID_DROPOFF")}

################################# BED CALIBRATION MACROS #################################


[gcode_macro Z_TILT_ADJUST] # THIS MACRO DROPS THE PROBE AFTER USE EXCEPT IF D=0 is precised
description: example of usage : Z_TILT_ADJUST [D=0 pour NE PAS drop la sonde, sinon par default la sonde est dropee]
rename_existing:    Z_TILT_ADJUST_ORIGINAL
gcode:
  {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}
  SET_SKEW CLEAR=1
  G90
  G28 STAY; home all axis AND KEEP THE PROBE due to the rename_existing
  Z_TILT_ADJUST_ORIGINAL
  G0 Z{euclid_probe.bed_clearance} F{ euclid_probe.move_speed_z_silent*60|float }            ; raise bed to 25
  {% if params.D is defined %}
    {% set dropoff = params.D|string %}
    {% if dropoff != "0" %}
      _EUCLID_DROPOFF
    {% endif %}
  {% else %}
    _EUCLID_DROPOFF
  {% endif %}


# Macro to perform a bed mesh calibration
[gcode_macro BED_MESH_CALIBRATE] # THIS MACRO DOES NOT DROP THE PROBE AFTER USE
rename_existing:    BED_MESH_CALIBRATE_ORIGINAL
gcode:
  SET_SKEW CLEAR=1
  G90
  G28 STAY ; home all axis AND KEEP THE PROBE due to the rename_existing
  BED_MESH_CALIBRATE_ORIGINAL
  G0 Z25 F600           ; raise bed to 25
  _EUCLID_DROPOFF
  # {% if params.D is defined %}
  #   {% set dropoff = params.D|string %}
  #   {% if dropoff == "1" %}
  #     _EUCLID_DROPOFF
  #   {% endif %}
  # {% endif %}


[gcode_macro HOME_LVL_MESH]
gcode:
  Z_TILT_ADJUST D=0       # this macro does a home inside itself
  BED_MESH_CALIBRATE # this macro does a home inside itself AND drops the probe







###################################
########################### SECURITY BEFORE PRINT ###########################
[gcode_macro _error_if_probe_deployed_before_print]
gcode:
  QUERY_PROBE                 ; check probe status
  _do_error_if_probe_deployed_before_print ; logic check to verify probe is not already deployed

[gcode_macro _do_error_if_probe_deployed_before_print]
gcode:
    {% if not printer.probe.last_query %}
      {action_raise_error("Euclid Probe IS DEPLOYED SO YOU CAN'T PRINT")}
    {% endif %}


#############################################################################

# [gcode_macro HOME_LVL_MESH]
# gcode:
#   Z_TILT_ADJUST       # this macro does a home inside itself
#   BED_MESH_CALIBRATE # this macro does a home inside itself
#   _EUCLID_DROPOFF


# [gcode_macro BED_MESH_CALIBRATE]
# description: example of usage : BED_MESH_CALIBRATE dimensions_bed=250,250 D=1
# rename_existing: BED_MESH_CALIBRATE_ORIGINAL
# ; gcode parameters
# variable_dimensions_bed : 250,250
# ; the clearance between print area and probe area 
# variable_mesh_area_offset : 5.0
# ; number of sample per probe point
# variable_probe_samples : 2
# ; minimum probe count
# variable_min_probe_count : 4
# ; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
# variable_probe_count_scale_factor : 1.0
# ; enable preference index
# variable_enable_reference_index : False
# variable_parameter_D : "1"
# ; to dropoff the probe 
# gcode:
#   {% if params.D is not defined %}
#     {action_raise_error("D is not defined, you need to put D=1 or D=0 to tell if you want to dropoff the probe or if you don't want to")}
#   {% endif %}
#   {% set dropoff = params.D|string %}
#   {% if params.dimensions_bed is defined %}
#     {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
#     # ICI safe_min_x ET ETC ... SONT LES COORDONNEES DE LA SONDE
#     {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
#     {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
#     {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
#     {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
#     {% set X_Center = printer.configfile.settings.z_tilt.z_positions[1][0] | float %} # VA LE CHERCHER DANS LES VALEURS DE LA CONFIG DE Z_TILT
#     {% set Y_min_bord_bed = 80 |float %} # A MODIF POUR POUVOIR ALLER LE CHERCHER DANS UNE VARIABLE QUELQUEPART
#     # Y_min_bord_bed c'est la valeur de Y dans le nozzle est au bord du bed
#     # 
#     # ICI probe_buildplate_area_min_x ET ETC ... SONT LES VRAIES COORDONNEES DU NOZZLE
#     {% set largeur_bed = dimensions_bed(",")[0]|float %}
#     {% set demi_largeur_bed = largeur_bed / 2 |float %}
#     {% set profondeur_bed = dimensions_bed(",")[1] |float %}
#     # 
#     {% set buildplate_area_min_x = X_center - demi_largeur_bed |float %}
#     {% set buildplate_area_min_y = Y_min_bord_bed |float %}
#     {% set buildplate_area_MAX_x =  X_center + demi_largeur_bed |float %}
#     {% set buildplate_area_MAX_y = Y_min_bord_bed + profondeur_bed |float %}
#     # changement de repere : on veut que ces points aient la sonde au dessus, donc :
#     {% set X_offset_probe = printer.configfile.config["probe"]["x_offset"] | float %}
#     {% set Y_offset_probe = printer.configfile.config["probe"]["y_offset"] | float %}
#     {% set probe_buildplate_area_min_x = buildplate_area_min_x - X_offset_probe %}
#     {% set probe_buildplate_area_min_y = buildplate_area_min_y - Y_offset_probe %}
#     {% set probe_buildplate_area_MAX_x = buildplate_area_MAX_x - X_offset_probe %}
#     {% set probe_buildplate_area_MAX_y = buildplate_area_MAX_y - Y_offset_probe %}
#     # 
#     {% if bedMeshConfig.probe_count.split(",")|length == 2 %}
#       {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
#       {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
#     {% else %}
#       {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
#       {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
#     {% endif %}
#     # 
#     {% set meshMaxPointX = meshPointX %}
#     {% set meshMaxPointY = meshPointY %}
#     # 
#     {% if probe_buildplate_area_min_x - mesh_area_offset >=  safe_min_x %}
#       {% set probe_buildplate_area_min_x = probe_buildplate_area_min_x - mesh_area_offset %}
#     {% else %}
#       {% set probe_buildplate_area_min_x = safe_min_x %}
#     {% endif %}
#     # 
#     {% if probe_buildplate_area_min_y - mesh_area_offset >=  safe_min_y %}
#       {% set probe_buildplate_area_min_y = probe_buildplate_area_min_y - mesh_area_offset %}
#     {% else %}
#       {% set probe_buildplate_area_min_y = safe_min_y %}
#     {% endif %}
#     # 
#     {% if probe_buildplate_area_max_x + mesh_area_offset <=  safe_max_x %}
#       {% set probe_buildplate_area_max_x = probe_buildplate_area_max_x + mesh_area_offset %}
#     {% else %}
#       {% set probe_buildplate_area_max_x = safe_max_x %}
#     {% endif %}
#     # 
#     {% if probe_buildplate_area_max_y + mesh_area_offset <=  safe_max_y %}
#       {% set probe_buildplate_area_max_y = probe_buildplate_area_max_y + mesh_area_offset %}
#     {% else %}
#       {% set probe_buildplate_area_max_y = safe_max_y %}
#     {% endif %}
#     # 
#     {% set meshPointX = (meshPointX * (probe_buildplate_area_max_x - probe_buildplate_area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
#     {% if meshPointX < min_probe_count %}
#       {% set meshPointX = min_probe_count %}
#     {% endif %}
#     {% if meshPointX > meshMaxPointX %}
#       {% set meshPointX = meshMaxPointX %}
#     {% endif %}
#     # 
#     {% set meshPointY = (meshPointY * (probe_buildplate_area_max_y -probe_buildplate_area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
#     {% if meshPointY < min_probe_count %}
#       {% set meshPointY = min_probe_count %}
#     {% endif %}
#     {% if meshPointY > meshMaxPointY %}
#       {% set meshPointY = meshMaxPointY %}
#     {% endif %}
#     # 
#     {% set algorithm = "lagrange" %}
#     {% if "algorithm" in bedMeshConfig and meshPointX >=4 and meshPointY >=4 %}
#         {% set algorithm = bedMeshConfig.algorithm %}
#     {% endif %}
#     # ENFIN LA MACRO ENTRE EN PISTE
#     G28 ; TRES IMPORTANT, S'ASSURE QUE LA PROBE EST SUR LA TETE, home all axis AND KEEP THE PROBE due to the rename_existing
#     {% if enable_reference_index %}
#         {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
#         BED_MESH_CALIBRATE_ORIGINAL mesh_min={probe_buildplate_area_min_x},{probe_buildplate_area_min_y} mesh_max={probe_buildplate_area_max_x},{probe_buildplate_area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
#     {% else %}
#         BED_MESH_CALIBRATE_ORIGINAL mesh_min={probe_buildplate_area_min_x},{probe_buildplate_area_min_y} mesh_max={probe_buildplate_area_max_x},{probe_buildplate_area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
#     {% endif %}
#     # RAISE BED
#     G0 Z25 F600           ; raise bed to 25
#     {% if dropoff == "1" %}
#       _EUCLID_DROPOFF
#       {action_respond_info("dropping off the probe")}
#     {% else %}
#       {action_respond_info("NOT dropping the probe")}
#     {% endif %}
#   {% else %}
#     {action_raise_error("You have to define dimensions_bed parameter, for example dimensions_bed=350,350")}
#   {% endif %}
# PRUSA SLICER EXAMPLE :
# BED_MESH_CALIBRATE AREA_START={first_layer_print_min[0]},{first_layer_print_min[1]} AREA_END={first_layer_print_max[0]},{first_layer_print_max[1]}









# morceau de TEST de code sympa :
# {% if params.D is defined %}
#   {% set dropoff = params.D|string %}
#   {% if dropoff == "1" %}
#     _EUCLID_DROPOFF
#     {action_respond_info("dropping off the probe")}
#   {% endif %}
# {% else %}
#   {action_raise_error("D is not defined, you need to put D=1 or D=0 to tell if you want to dropoff the probe or if you don't want")}
# {% endif %}



# [gcode_macro G32]
# gcode: SET_KINEMATIC_POSITION Z=0
#      MAIN_RED 
#      BED_MESH_CLEAR
#      #G0 Z20 F800           ; raise bed to 15
#      G28 X Y Z              ; home Y & Y
#      #EUCLID_PICKUP                  ; deploy Euclid Probe
#      #G0 X135 Y120 F18000    ; move to center of be @ X150 Y150
#      #G28 Z                 ; home Z   
#      Z_TILT_ADJUST
#      MAIN_GREEN
#      G28 Z
#      G0 Z20 F800
#      #EUCLID_DROPOFF
#      G0 F18000
#      G1 X10 Y10 Z60
#      MAIN_WHITE



################################################################
# A PARTIR DES FICHIERS DE XON :
################################################################

# [gcode_macro Z_TILT_ADJUST]
# rename_existing: _Z_TILT_ADJUST
# gcode:
#         EUCLID_PICKUP
#         _Z_TILT_ADJUST {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
#         euclid_dropoff

# bidouille macro G28 XON
# [gcode_macro G28]
# rename_existing: FG28
# gcode:
#   {% if 'Z' in params or not len(params) %}
#     # Either Z was specifically homed, or all axes are being homed
#     {% if 'X' in params or 'Y' in params or not len(params) %}
#       # Check for X or Y explicitly, and if no params were sent
#       FG28 { 'X' if 'X' in params } {'Y' if 'Y' in params}
#     {% endif %}
#     # pick up and home with euclid
#     G90
#     SET_KINEMATIC_POSITION Z=0
#     G0 Z25 F600    ; raise bed to 25
#     _EUCLID_PICKUP_0   # NO MOVE OF THE BED HERE
#     {% set X_Center = (printer.configfile.config["stepper_x"]["position_max"]|float)/2|int %}
#     {% set Y_Center = (printer.configfile.config["stepper_y"]["position_max"]|float)/2|int %}
#     G0 X{X_Center} Y{Y_Center} F12000    ; move to "fake" center #TODO modifier vitesse
#     G28 Z                 ; home Z
#     G0 Z25 F600           ; raise bed to 25
#     # drop_off euclid
#     _EUCLID_DROPOFF     # NO MOVE OF THE BED HERE
#   {% else %}
#     # Z should NOT be homed (meaning either X or Y or both were specified but not Z)
#     FG28 {rawparams}
#   {% endif %}





# ################################## EUCLID_PICKUP ################################## # THE BED MOVES HERE
# # Macro to Deploy Bed Probe 
# [gcode_macro EUCLID_PICKUP] ######### THE BED MOVES HERE
# gcode:
#   G90
#   {action_respond_info("Entering EUCLID_PICKUP")}
#   _error_if_probe_deployed_before_picking_it_up    ; check if the probe is already attached
#   _EUCLID_PICKUP

# # Macro to Deploy Bed Probe 
# [gcode_macro _EUCLID_PICKUP] ######### THE BED MOVES HERE
# gcode:
#   G90
#   {% if printer.probe.last_query %}
#     SET_KINEMATIC_POSITION Z=0
#     G0 Z25 F600        ;  set approach elevation of Z25 to clear probe over bed on fixed gantry machine
#     G28 X Y
#     {% set X_Center = (printer.configfile.config["stepper_x"]["position_max"]|float)/2|int %}
#     {% set Y_Center = (printer.configfile.config["stepper_y"]["position_max"]|float)/2|int %}
#     G0 X{X_Center} Y{Y_Center} F18000    ; move to "fake" center #TODO modifier vitesse
#     G0 X280 Y10 F18000          ;  move the carriage to safe position to move from
#     G0 X292 Y1 F3000            ;  move to the side of the dock
#     G4 P250              ;  wait 1/4 second 
#     G0 X354 Y1             ;  move sideways over the dock to pick up probe
#     M400                 ;  wait for moves to finish
#     G4 P250              ;  pause 1/4 sec for detection
#     G0 X354 Y70 F18000           ;  move out of the dock in a straight line 
#   {% endif %}
#   _error_if_probe_not_deployed
#   {action_respond_info("Exiting EUCLID_PICKUP")}


# ################################## EUCLID_DROPOFF ################################## # THE BED MOVES HERE
# # Macro to retract Bed Probe
# [gcode_macro EUCLID_DROPOFF]
# gcode:
#   G90
#   {action_respond_info("Entering EUCLID_DROPOFF")}
#   _error_if_probe_not_deployed
#   _EUCLID_DROPOFF

# # Macro to Stow Bed Leveling Probe
# [gcode_macro _EUCLID_DROPOFF]
# gcode:
#   G90
#   {% if not printer.probe.last_query %} ; the logic on this needs function check
#     SET_KINEMATIC_POSITION Z=0
#     G0 Z25 F600        ;  set approach elevation of Z25 to clear probe over bed on fixed gantry machine
#     G28 X Y
#     {% set X_Center = (printer.configfile.config["stepper_x"]["position_max"]|float)/2|int %}
#     {% set Y_Center = (printer.configfile.config["stepper_y"]["position_max"]|float)/2|int %}
#     G0 X{X_Center} Y{Y_Center} F18000    ; move to "fake" center #TODO modifier vitesse
#     G0 X354 Y70 F12000               ;  move to the re-entry staging position
#     #G0 X6 Y264 F3000               ;  move to a position in front of the dock so simple linear movement into dock 
#     G0 X354 Y1 F3000                 ;  slowly move into dock 
#     M400                          ;  wait for moves to finish
#     G4 P250                       ;  forced pause here so motion is definite 90 tavel to swipe
#     G0 X292 Y1 F6000               ;  quick swipe off 
#     G0 X40 Y0 F18000                   ;  move to front center of bed                   
#     G0 Z0 F600                   ;  move up to elevation of Z20
#   {% endif %}                     ;  exit the if-then loop. was missing in previous versions
#   _error_if_probe_deployed         ;  verify that the probe is detached. is corrected error  
#   {action_respond_info("Exiting EUCLID_DROPOFF")}


# [gcode_macro G29]
# gcode: 
#   G28
#   BED_MESH_CALIBRATE
#   BED_MESH_PROFILE SAVE=p1
#   G1 X0 Y0 Z5 F4000


# # Macro to perform a modified z_tilt  by wrapping it between EUCLID_PICKUP/EUCLID_DROPOFF macros
# [gcode_macro Z_TILT_ADJUST]
# rename_existing:    Z_TILT_ADJUST_ORIGINAL
# gcode:
#   EUCLID_PICKUP                           ; deploy Euclid Probe if needed
#   Z_TILT_ADJUST_ORIGINAL {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %} ; check bed level and pass arguments to the original
#   EUCLID_DROPOFF                           ; dock Euclid Probe





# [gcode_macro G28]
# rename_existing: G28.1
# gcode:
#   {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
#   {% set home_x = 'X' in params or home_all %}
#   {% set home_y = 'Y' in params or home_all %}
#   {% set home_z = 'Z' in params or home_all %}

#   {% if home_x or home_y %}
#     G28.1 {'X' if home_x } {'Y' if home_y }
#   {% endif %}
#   {% if home_z %}
#     # put your euclid stuff here
#   {% endif %}


################################################################

# [gcode_macro G28] #HERE FROM NOW ON, THE G28 [...] WILL NOT DROPOFF THE PROBE
# # IT WILL NEED THE PARAMETER D TO DROPOFF THE PROBE
# rename_existing: G28.1
# gcode:
#   {% if 'Z' in params or rawparams|trim == '' %}
#     # Either Z was specifically homed, or all axes are being homed
#     {% if 'Y' in params %}
#       G28.1 Y
#     {% endif %}
#     {% if 'X' in params %}
#       G28.1 X
#     {% endif %}
#     {% if rawparams|trim == '' %} #i.e si pas de parametre
#       G28.1 Y X
#     {% endif %}
#     # pick up and home with euclid
#     G90
#     SET_KINEMATIC_POSITION Z=0
#     G0 Z25 F600    ; raise bed to 25
#     {% set homed_axes = printer.toolhead.homed_axes %}
#     {% set home_xy = 'x' not in homed_axes or 'y' not in homed_axes %}
#     {% if home_xy %}
#       G28.1 Y X
#     {% endif %}
#     _EUCLID_PICKUP_0   # NO MOVE OF THE BED HERE
#     {% set X_Center = 184 %}
#     {% set Y_Center = (printer.configfile.config["stepper_y"]["position_max"]|float)/2|int %}
#     G0 X{X_Center} Y{Y_Center} F12000    ; move to "fake" center #TODO modifier vitesse
#     SAVE_GCODE_STATE NAME=NORMAL_MODE
#     {% set offsetX = -1*printer.configfile.config["probe"]["x_offset"] | float %}
#     {% set offsetY = -1*printer.configfile.config["probe"]["y_offset"] | float %}
#     SET_GCODE_OFFSET MOVE=1 X={offsetX} Y={offsetY} MOVE_SPEED=100 # en mm/s
#     G28.1 Z                 ; home Z
#     G0 Z25 F600           ; raise bed to 25
#     RESTORE_GCODE_STATE MOVE=1 NAME=NORMAL_MODE MOVE_SPEED=100 # en mm/s
#   {% else %}
#     # Z should NOT be homed (meaning either X or Y or both were specified but not Z)
#     G28.1 {'Y' if 'Y' in params} { 'X' if 'X' in params }
#   {% endif %}
# 
# [homing_override]
# gcode:
#   G90
#   SET_KINEMATIC_POSITION Z=0
#   G0 Z25 F600           ; raise bed to 25
#   # {% set homed_axes = printer.toolhead.homed_axes %}
#   # {% if 'x' not in homed_axes or 'y' not in homed_axes %}
#   #   G28 { 'X' if 'x' not in homed_axes else '' } { 'Y' if 'y' not in homed_axes else '' } ; home Y & Y only if not homed
#   # {% endif %}        
#   G28 X Y     
#   _EUCLID_PICKUP_0   # NO MOVE OF THE BED HERE
#   {% set X_Center = (printer.configfile.config["stepper_x"]["position_max"]|float)/2|int %}
#   {% set Y_Center = (printer.configfile.config["stepper_y"]["position_max"]|float)/2|int %}
#   G0 X{X_Center} Y{Y_Center} F12000    ; move to "fake" center #TODO modifier vitesse
#   G28 Z                 ; home Z
#   G0 Z25 F600           ; raise bed to 25
#   _EUCLID_DROPOFF     # NO MOVE OF THE BED HERE
# axes: z
# #set_position_z: -5.   ; for use with nozzle touch off after homing











# [gcode_macro BED_MESH_CALIBRATE]
# rename_existing: BED_MESH_CALIBRATE_BASE
# ; gcode parameters
# variable_parameter_AREA_START : 0,0
# variable_parameter_AREA_END : 0,0
# ; the clearance between print area and probe area 
# variable_mesh_area_offset : 5.0
# ; number of sample per probe point
# variable_probe_samples : 2
# ; minimum probe count
# variable_min_probe_count : 3
# ; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
# variable_probe_count_scale_factor : 1.0
# ; enable preference index
# variable_enable_reference_index : False
# gcode:
#   {% if params.AREA_START and params.AREA_END %}
#     {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
#     {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
#     {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
#     {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
#     {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
#     # 
#     {% set area_min_x = params.AREA_START.split(",")[0]|float %}
#     {% set area_min_y = params.AREA_START.split(",")[1]|float %}
#     {% set area_max_x = params.AREA_END.split(",")[0]|float %}
#     {% set area_max_y = params.AREA_END.split(",")[1]|float %}
#     # 
#     {% if bedMeshConfig.probe_count.split(",")|length == 2 %}
#       {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
#       {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
#     {% else %}
#       {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
#       {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
#     {% endif %}
#     # 
#     {% set meshMaxPointX = meshPointX %}
#     {% set meshMaxPointY = meshPointY %}
#     # 
#     {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
#       {% if area_min_x - mesh_area_offset >=  safe_min_x %}
#         {% set area_min_x = area_min_x - mesh_area_offset %}
#       {% else %}
#         {% set area_min_x = safe_min_x %}
#       {% endif %}
#       # 
#       {% if area_min_y - mesh_area_offset >=  safe_min_y %}
#         {% set area_min_y = area_min_y - mesh_area_offset %}
#       {% else %}
#         {% set area_min_y = safe_min_y %}
#       {% endif %}
#       # 
#       {% if area_max_x + mesh_area_offset <=  safe_max_x %}
#         {% set area_max_x = area_max_x + mesh_area_offset %}
#       {% else %}
#         {% set area_max_x = safe_max_x %}
#       {% endif %}
#       # 
#       {% if area_max_y + mesh_area_offset <=  safe_max_y %}
#         {% set area_max_y = area_max_y + mesh_area_offset %}
#       {% else %}
#         {% set area_max_y = safe_max_y %}
#       {% endif %}
#       # 
#       {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
#       {% if meshPointX < min_probe_count %}
#         {% set meshPointX = min_probe_count %}
#       {% endif %}
#       {% if meshPointX > meshMaxPointX %}
#         {% set meshPointX = meshMaxPointX %}
#       {% endif %}
#       # 
#       {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
#       {% if meshPointY < min_probe_count %}
#         {% set meshPointY = min_probe_count %}
#       {% endif %}
#       {% if meshPointY > meshMaxPointY %}
#         {% set meshPointY = meshMaxPointY %}
#       {% endif %}
#       # 
#       {% set algorithm = "lagrange" %}
#       {% if "algorithm" in bedMeshConfig and meshPointX >=4 and meshPointY >=4 %}
#           {% set algorithm = bedMeshConfig.algorithm %}
#       {% endif %}
#       # 
#       {% if enable_reference_index %}
#           {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
#           BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
#       {% else %}
#           BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
#       {% endif %}
#     {% else %}
#       BED_MESH_CALIBRATE_BASE
#     {% endif %}
#   {% else %}
#     {action_raise_error("You have to define AREA_START and AREA_END parameters")}
#     # BED_MESH_CALIBRATE_BASE
#   {% endif %}


# FROM jmlott VZ.143: on vzbot discord
# [gcode_macro variables]
# gcode:
#     SET_GCODE_VARIABLE MACRO=variables VARIABLE=var1 VALUE=-7
#     SET_GCODE_VARIABLE MACRO=variables VARIABLE=var2 VALUE=63

# z_positions:
# {printer["gcode_macro variables"].var1}, {printer["gcode_macro variables"].var2}





# from

# 17:06]alexz: You normally can get that via printer.configfile.settings.z_tilt.z_position. Now we need to find out how that parameter is shown
# [17:08]alexz: Add to your printer.cig and restart klipper
# [17:09]alexz: Than type DUMP_PARAMETER S=z_tilt in the console to see how Klipper returns the parameter 
# [17:10]alexz: Make me a screenshot so that I see how it is returned than I will explain you how to reach it

# # Use:
# # - DUMP_PARAMETER                       print all parameter expect configfile
# # - DUMP_PARAMETER P='gcode_macro _TEST' print the defined parameter group
# # - DUMP_PARAMETER C='printer'           print the defined config values
# # - DUMP_PARAMETER S='printer'           print the defined settings values
# [gcode_macro DUMP_PARAMETER]
# description: Debug: Print entries of the printer object
# gcode:
#   {% set config = True if params.C or params.S else False %}
#   {% set path = 'config'   if params.C 
#            else 'settings' if params.S %}
#   {% set search = params.C if params.C
#              else params.S if params.S
#              else params.P if params.P %}
#   {% set out = [] %}
#   {% for name1 in printer|sort %}
#     {% if config %} ; print the searched printer.configfile[path] parameter
#       {% if name1 is in ['configfile'] %}
#         {% for name2 in printer[name1][path]|sort %}
#           {% if name2 is in [search] %}
#             {% for name3, value in printer[name1][path][name2].items()|sort %}
#               {% set _dummy = out.append("printer.configfile.%s['%s'].%s = %s" % 
#                           (path, name2, name3, value)) %}
#             {% endfor %}
#           {% endif %}
#         {% endfor %}
#       {% endif %}
#     {% else %}
#       {% for name2, value in printer[name1].items()|sort %} ; search for anything expext printer.configfile
#         {% if search is not defined and name1 is not in ['configfile'] %} ; print all printer. parameter
#           {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
#         {% elif search is defined and name1 is in [search] %} ; print the searched printer. parameter
#           {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
#         {% endif %}
#       {% endfor %}
#     {% endif %}
#   {% endfor %}
#   {% if out|length > 0 %}
#     {action_respond_info(out|join("\n"))}
#   {% else %}
#     {action_respond_info("Nothing found for \"DUMP_PARAMETER %s\"" % rawparams)}
#   {% endif %}
# 
# Then type DUMP_PARAMETER S=z_tilt in the console to see how Klipper returns the parameter

#
# example homing overide to use Euclid as an endstop and Z-probe
# example assumes that the bed is 300x300
# assumes homing Z at center of bed
# assumes that macro for probe deploy and retract below are called EUCLID_PICKUP and EUCLID_DROPOFF
#
#
# [gcode_macro _bougex]
# gcode:
#   G0 X20 Y150 F5000
#   G0 X300 Y150 F5000
#   G0 X20 Y150 F5000

# [gcode_macro _bougey]
# gcode:
#   G0 X20 Y20 F5000
#   G0 X20 Y200 F5000
#   G0 X20 Y20 F5000

# [gcode_macro MA_MACROTEST1]
# gcode:
#   G28.1 Y
#   G28.1 X
#   {% set homed_axes = printer.toolhead.homed_axes %}
#   {% set home_xy = 'x' not in homed_axes or 'y' not in homed_axes %}
#   G90
#   {% if home_xy %}
#     G28.1 Y
#     G28.1 X
#   {% endif %}
#   # SET_KINEMATIC_POSITION Z=0
#   # G0 Z25 F600    ; raise bed to 25
#   # {% set home_fake = 'x' not in homed_axes or 'y' not in homed_axes %}
#   # {% if home_fake %}
#   #   _bougex
#   # {% endif %}

# [gcode_macro MA_MACROTEST2]
# gcode:
#   G90
#   SET_KINEMATIC_POSITION Z=0
#   G0 Z25 F600    ; raise bed to 25
#   MON_AUX1
#   MON_AUX11

# [gcode_macro MA_MACROTEST3]
# gcode:
#   G90
#   SET_KINEMATIC_POSITION Z=0
#   {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}
#   G0 Z{ euclid_probe.bed_clearance } F600    ; raise bed to 25

# [gcode_macro MA_MACROTEST4]
# gcode:
#   G90
#   SET_KINEMATIC_POSITION Z=0
#   G28.1 X
#   # {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}
#   # G0 Z{ euclid_probe.bed_clearance } F600    ; raise bed to 25
#   {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
#   {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
#   {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
#   {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
#   {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
#   {action_respond_info("Entering EUCLID_PICKUP_0")}
#   G0 X{safe_max_x} F10000 


# [gcode_macro MON_AUX1]
# gcode:
#   {% set homed_axes = printer.toolhead.homed_axes %}
#   {% set home_y = 'y' not in homed_axes %}
#   {% if home_y %}
#     G28.1 Y
#     G0 Y150 F10000
#     G0 Y200 F10000
#     G0 Y150 F10000
#     G0 Y200 F10000
#   {% endif %}

# [gcode_macro MON_AUX11]
# gcode:
#   {% set homed_axes = printer.toolhead.homed_axes %}
#   {% set home_y = 'y' not in homed_axes %}
#   {% if home_y %}
#     G0 Y50 F10000
#     G0 Y20 F10000
#     G0 Y50 F10000
#     G0 Y20 F10000
#   {% endif %}

# [gcode_macro MON_AUX2]
# gcode:
#   {% set homed_axes = printer.toolhead.homed_axes %}
#   {% set home_x = 'x' not in homed_axes %}
#   {% if home_x %}
#     G0 Y50 F10000
#     G0 Y20 F10000
#     G0 Y50 F10000
#     G0 Y20 F10000
#   {% endif %}


# [gcode_macro MA_MACROTEST3]
# gcode:
#   {% set homed_axes = printer.toolhead.homed_axes %}
#   {% set home_xy = 'x' not in homed_axes or 'y' not in homed_axes %}
#   G90
#   {% if home_xy %}
#     G28.1 Y
#     G28.1 X
#     _bougex
#   {% endif %}
#   SET_KINEMATIC_POSITION Z=0
#   G0 Z25 F600    ; raise bed to 25
#   {% set home_fake = 'x' not in homed_axes or 'y' not in homed_axes %}
#   {% if home_fake %}
#     _bougey
#   {% endif %}




    # G0 X{ euclid_probe.position_safe[0] } Y{ euclid_probe.position_safe[1] } F{ euclid_probe.move_speed_exit*60|float }
    # G0 X{ euclid_probe.position_exit[0] } Y{ euclid_probe.position_exit[1] } F{ euclid_probe.move_speed_moderate*60|float }
    # G4 P250              ;  wait 1/4 second 
    # G0 X{ euclid_probe.position_dock[0] } Y{ euclid_probe.position_dock[1] } F{ euclid_probe.move_speed_connect*60|float }
    # M400                 ;  wait for moves to finish
    # G4 P250              ;  pause 1/4 sec for detection
    # G0 X{ euclid_probe.position_slide[0] } Y{ euclid_probe.position_slide[1] } F{ euclid_probe.move_speed_slide*60|float } ;  move out of the dock in a straight line 
    # G0 X{ euclid_probe.position_safe[0] } Y{ euclid_probe.position_safe[1] } F{ euclid_probe.move_speed_exit*60|float } ;  move out of the dock in a straight line 





    # G0 X354 Y70 F12000               ;  move to the re-entry staging position
    # #G0 X6 Y264 F3000               ;  move to a position in front of the dock so simple linear movement into dock 
    # G0 X354 Y1 F3000                 ;  slowly move into dock 
    # M400                          ;  wait for moves to finish
    # G4 P250                       ;  forced pause here so motion is definite 90 tavel to swipe
    # G0 X292 Y1 F6000               ;  quick swipe off 
    # G0 X40 Y0 F18000                   ;  move to front center of bed      



    # G0 X{ euclid_probe.position_safe[0] } Y{ euclid_probe.position_safe[1] } F{ euclid_probe.move_speed_exit*60|float }
    # G0 X{ euclid_probe.position_slide[0] } Y{ euclid_probe.position_slide[1] } F{ euclid_probe.move_speed_moderate*60|float }
    # G4 P250              ;  wait 1/4 second 
    # G0 X{ euclid_probe.position_dock[0] } Y{ euclid_probe.position_dock[1] } F{ euclid_probe.move_speed_slide*60|float }
    # M400                 ;  wait for moves to finish
    # G4 P250              ;  pause 1/4 sec for detection
    # G0 X{ euclid_probe.position_exit[0] } Y{ euclid_probe.position_exit[1] } F{ euclid_probe.move_speed_dropoff*60|float }
    # G0 X{ euclid_probe.position_safe[0] } Y{ euclid_probe.position_safe[1] } F{ euclid_probe.move_speed_exit*60|float } ;  move out of the dock in a straight line 


# [gcode_macro test18]
# gcode:
#   {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}
#   G0 X{ euclid_probe.position_safe[0] } Y{ euclid_probe.position_safe[1] } F{ euclid_probe.move_speed_exit*60|float }
#   G0 X{ euclid_probe.position_slide[0] } Y{ euclid_probe.position_slide[1] } F{ euclid_probe.move_speed_moderate*60|float }
#   G4 P250              ;  wait 1/4 second 
#   G0 X{ euclid_probe.position_dock[0] } Y{ euclid_probe.position_dock[1] } F{ euclid_probe.move_speed_slide*60|float }
#   M400                 ;  wait for moves to finish
#   G4 P250              ;  pause 1/4 sec for detection
#   G0 X{ euclid_probe.position_exit[0] } Y{ euclid_probe.position_exit[1] } F{ euclid_probe.move_speed_dropoff*60|float }
#   G0 X{ euclid_probe.position_safe[0] } Y{ euclid_probe.position_safe[1] } F{ euclid_probe.move_speed_exit*60|float } ;  move out of the dock in a straight line 


# [gcode_macro test19]
# gcode:
#   {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}
#   G0 X{ euclid_probe.position_safe[0] } Y{ euclid_probe.position_safe[1] } F{ euclid_probe.move_speed_exit*60|float }
#   G0 X{ euclid_probe.position_exit[0] } Y{ euclid_probe.position_exit[1] } F{ euclid_probe.move_speed_moderate*60|float }
#   G4 P250              ;  wait 1/4 second 
#   G0 X{ euclid_probe.position_dock[0] } Y{ euclid_probe.position_dock[1] } F{ euclid_probe.move_speed_connect*60|float }
#   M400                 ;  wait for moves to finish
#   G4 P250              ;  pause 1/4 sec for detection
#   G0 X{ euclid_probe.position_slide[0] } Y{ euclid_probe.position_slide[1] } F{ euclid_probe.move_speed_slide*60|float } ;  move out of the dock in a straight line 
#   G0 X{ euclid_probe.position_safe[0] } Y{ euclid_probe.position_safe[1] } F{ euclid_probe.move_speed_exit*60|float } ;  move out of the dock in a straight line 


# FROM jmlott VZ.143: on vzbot discord
# [gcode_macro variables]
# gcode:
#     SET_GCODE_VARIABLE MACRO=variables VARIABLE=var1 VALUE=-7
#     SET_GCODE_VARIABLE MACRO=variables VARIABLE=var2 VALUE=63

# z_positions:
# {printer["gcode_macro variables"].var1}, {printer["gcode_macro variables"].var2}

