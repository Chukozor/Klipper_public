######################### POUR PAUSE/RESUME/END_PRINT ###############################

[gcode_macro MyVariables]
description: config vars for pausing print or resume or endprint 
## @TODO Replace the coordinates to suit your printer
variable_position_waiting:  [ 10, 420 ]
variable_mypause_changingfilament:       [ 10, 420 ]
variable_position_end_of_print:       [ 10, 420 ]
variable_position_change_filament:       [ 86, 16, 100 ] # usefull to purge filament here too, CAD to design purge box + silicon
variable_retract_pause_length: 3.0
variable_extrude_restart_length: 3.0
variable_retract_end_of_print_length: 3.0
variable_end_of_print_z_height: 30
variable_position_min_brush:      [ 31, 14 ] # Xmin et Ymin
variable_position_max_brush:      [ 70, 19 ] # Xmax et Ymax
variable_position_after_rubbing : [ 80, 59 ] # Xmax et Ymax
variable_x_offset_rubbing_on_brush:  10 # la buse va plus loin que la brosse a dent de cette valeur
variable_brush_wipe_count: 2 # WARNING : cette valeur doit etre superieure ou egale a 2
variable_brush_quick_wipe_count: 2 # WARNING : cette valeur doit etre superieure ou egale a 2
# SPEED in mm/s
variable_move_speed_beginning_printing:       300
variable_move_speed_waiting:       300
variable_move_speed_changingfilament:      300
variable_move_speed_end_of_print:    300
variable_move_speed_z:       15
variable_move_speed_retraction_pause: 60
variable_move_speed_extrusion_restart: 60
variable_move_speed_brush_rubbing : 200
## internal state variables; not for configuration!
variable_batch_mode_enabled: False
gcode:
    RESPOND TYPE=command MSG="{ printer['gcode_macro MyVariables'] }"

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
gcode:
  {% set myvar = printer["gcode_macro MyVariables"] %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{ myvar.retract_pause_length|float } F{ myvar.move_speed_retraction_pause*60|float }
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F{ myvar.move_speed_z*60|float }
    G90 # absolute positioning coordinates
    M83 # set relative for the extruder (extruder was affected by the G90 that's why M83 is added)
    G0 X{ myvar.position_waiting[0] } Y{ myvar.position_waiting[1] } F{ myvar.move_speed_waiting*60|float }
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

# ===================================================
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  {% set myvar = printer["gcode_macro MyVariables"] %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {% else %}
    {% set get_params = ('VELOCITY=' + ((myvar.move_speed_waiting*60|float)|string)) %} # default value for velocity
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{ myvar.extrude_restart_length } F{ myvar.move_speed_extrusion_restart*60|float }
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESUME_BASE {get_params}


[gcode_macro _BRUSH_AND_RESUME]
description: as the name says
gcode:
  {% set myvar = printer["gcode_macro MyVariables"] %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {% else %}
    {% set get_params = ('VELOCITY=' + ((myvar.move_speed_waiting*60|float)|string)) %} # default value for velocity
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{ myvar.extrude_restart_length } F{ myvar.move_speed_extrusion_restart*60|float }
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  _QUICK_BRUSH
  RESUME_BASE {get_params}


# [gcode_macro debug_resume]
# description: debug
# gcode:
#   {% set myvar = printer["gcode_macro MyVariables"] %}
#   {% set machin = ('VELOCITY=' + ((myvar.move_speed_waiting*60|float)|string)) %}
#   {action_respond_info('machin vaut %s' % machin)}


# ===================================================
# [gcode_macro RESUME]
# description: Resume the actual running print
# rename_existing: RESUME_BASE
# gcode:
#   ##### read E from pause macro #####
#   {% set E = printer["gcode_macro PAUSE"].extrude|float %}
#   #### get VELOCITY parameter if specified ####
#   {% if 'VELOCITY' in params|upper %}
#     {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
#   {%else %}
#     {% set get_params = ('VELOCITY=' + "10000") %} # default value for velocity
#   {% endif %}
#   ##### end of definitions #####
#   {% if printer.extruder.can_extrude|lower == 'true' %}
#     G91
#     G1 E{E} F3000
#   {% else %}
#     {action_respond_info("Extruder not hot enough")}
#   {% endif %}  
#   RESUME_BASE {get_params}

# ===================================================
# ===================================================
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
# variable_extrude: 3.0
gcode:
  _END_PRINT
  CANCEL_PRINT_BASE
  M221 S100
  # # # ajouts persos Ã  partir d'ici
  # # {% set E = printer["gcode_macro CANCEL_PRINT"].extrude|float %}
  # # {% set x_park = printer.toolhead.axis_minimum.x|float + 5.0 %}
  # # {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  # # ##### calculate save lift position #####
  # # {% set max_z = printer.toolhead.axis_maximum.z|float %}
  # # {% set act_z = printer.toolhead.position.z|float %}
  # # {% if act_z < (max_z - 2.0) %}
  # #     {% set z_safe = 2.0 %}
  # # {% else %}
  # #     {% set z_safe = max_z - act_z %}
  # # {% endif %}
  # # ##### end of definitions #####
  # # PAUSE_BASE
  # # G91
  # # {% if printer.extruder.can_extrude|lower == 'true' %}
  # #   G1 E-{E} F2100
  # # {% else %}
  # #   {action_respond_info("Extruder not hot enough")}
  # # {% endif %}
  # # {% if "xyz" in printer.toolhead.homed_axes %}
  # #   G1 Z{z_safe} F900
  # #   G90   # absolute positioning coordinate
  # #   M83   # set relative for the extruder (extruder was affected by the G90 that's why M83 is added)
  # #   G1 X{x_park} Y{y_park} F6000
  # # {% else %}
  # #   {action_respond_info("Printer not homed")}
  # # {% endif %} 

[gcode_macro _END_PRINT]
gcode:
  {% set myvar = printer["gcode_macro MyVariables"] %}
  TURN_OFF_HEATERS    # turn off heaters...
  BED_MESH_CLEAR
  M106 S64
  SAVE_GCODE_STATE NAME=END_state
  M83                 # set relative extrusion
  G92 E0              # reset extrusion amount
  G1 E-3 F4000        # retract 3mm
  G1 E-{ myvar.retract_end_of_print_length|float } F{ myvar.move_speed_retraction_pause*60|float }
  # move the toolhead out of the way
  # if the tool is less than 30mm away from Z Max, move it to Z max, otherwise, move Z up 30mm
  # Obtain the Z axis limit from the [stepper_z] section of the config file and make
  # a decision where to move the Z axis based on the current toolhead 
  {% if printer.toolhead.position.z|float + myvar.end_of_print_z_height >= printer.configfile.config["stepper_z"]["position_max"]|float %}
    G90                  # set absolute positioning
    M83                  # set relative for the extruder (extruder was affected by the G90 that's why M83 is added)
    G1 Z{printer.configfile.config["stepper_z"]["position_max"]|float} F{ myvar.move_speed_z*60|float } ;Move tool
  {% else %}
    G91                  # set relative positioning
    G1 Z{ myvar.end_of_print_z_height|float } F{ myvar.move_speed_z*60|float }         # move Z axis up the value wanted
  {% endif %}
  RESTORE_GCODE_STATE NAME=END_state
  M221 S100
  G90                  # set absolute positioning
  M83                  # set relative for the extruder (extruder was affected by the G90 that's why M83 is added)
  G0 X{ myvar.position_end_of_print[0] } Y{ myvar.position_end_of_print[1] } F{ myvar.move_speed_end_of_print*60|float }    # park tool at back of printer
  # TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=10 MAXIMUM=90 # Wait until the given temperature sensor is at or above the supplied MINIMUM and/or at or below the supplied MAXIMUM
  # M107                 # Fan off    
  #UNLOAD_FILAMENT     # this is a good spot to call an unload 
                        # filament macro, if you are into that sort of thing
  SET_GCODE_OFFSET Z=0 # reset whatever babystepping you have done
  SET_SKEW CLEAR=1
  CLEAR_PAUSE          # clear whatever PAUSE state you may have if you have it
  CANCEL_FAN_OVERRIDE
  # M117 DONE!!!        # print a message on your LCD
  SONNERIE_FIN


[gcode_macro MY_PAUSE]
gcode:
  PAUSE

[gcode_macro MY_RESUME]
gcode:
  RESUME

[gcode_macro MY_CANCEL_PRINT]
gcode:
  CANCEL_PRINT


[gcode_macro SONNERIE_FIN]
gcode:
  M300 S2000 P500 V100
  M300 S1600 P500 V100
  M300 S1200 P500 V100
  M300 S850 P500 V100

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################


[firmware_retraction] # Use 
retract_length: 0.1          # The length of filament (in mm) to retract when G10 is activated, and to unretract when G11 is activated (but see unretract_extra_length below). The default is 0 mm.
retract_speed: 60            # The speed of retraction, in mm/s. The default is 20 mm/s.
unretract_extra_length: 0    # The length (in mm) of *additional* filament to add when unretracting.
unretract_speed: 60          # The speed of unretraction, in mm/s. The default is 10 mm/s.
# COMMAND : SET_RETRACTION [RETRACT_LENGTH=<mm>] [RETRACT_SPEED=<mm/s>] [UNRETRACT_EXTRA_LENGTH=<mm>] [UNRETRACT_SPEED=<mm/s>]
# Adjust the parameters used by firmware retraction. RETRACT_LENGTH determines the length of filament to retract and unretract. The speed of retraction is adjusted via RETRACT_SPEED, and is typically set relatively high. The speed of unretraction is adjusted via UNRETRACT_SPEED, and is not particularly critical, although often lower than RETRACT_SPEED. In some cases it is useful to add a small amount of additional length on unretraction, and this is set via UNRETRACT_EXTRA_LENGTH. SET_RETRACTION is commonly set as part of slicer per-filament configuration, as different filaments require different parameter settings.

# COMMAND : GET_RETRACTION: Queries the current parameters used by firmware retraction and displays them on the terminal.


#######################################################################################################################
############################################# BUILT IN TOWER USE #######################################################
#######################################################################################################################


# TUNING_TOWER COMMAND=<command> PARAMETER=<name> START=<value> [SKIP=<value>] [FACTOR=<value> [BAND=<value>]] | [STEP_DELTA=<value> STEP_HEIGHT=<value>]:
# A tool for tuning a parameter on each Z height during a print. The tool will run the given COMMAND with the given PARAMETER assigned to a value that varies with Z according to a formula. Use FACTOR if you will use a ruler or calipers to measure the Z height of the optimum value, or STEP_DELTA and STEP_HEIGHT if the tuning tower model has bands of discrete values as is common with temperature towers. If SKIP=<value> is specified, the tuning process doesn't begin until Z height <value> is reached, and below that the value will be set to START; in this case, the z_height used in the formulas below is actually max(z - skip, 0). There are three possible combinations of options:
# 
# FACTOR: The value changes at a rate of factor per millimeter. The formula used is: value = start + factor * z_height. You can plug the optimum Z height directly into the formula to determine the optimum parameter value.

# FACTOR and BAND: The value changes at an average rate of factor per millimeter, but in discrete bands where the adjustment will only be made every BAND millimeters of Z height. The formula used is: value = start + factor * ((floor(z_height / band) + .5) * band).

# STEP_DELTA and STEP_HEIGHT: The value changes by STEP_DELTA every STEP_HEIGHT millimeters. The formula used is: value = start + step_delta * floor(z_height / step_height). You can simply count bands or read tuning tower labels to determine the optimum value.



# TUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=SQUARE_CORNER_VELOCITY START=0.1 FACTOR=1



# TUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=SQUARE_CORNER_VELOCITY START=0.1 STEP_DELTA=1 STEP_HEIGHT=5


[gcode_macro SET_MY_RETRACTION]
gcode:
    {% set SLICER = params.SLICER|string %}
    {% set R_L = params.RETRACT_LENGTH|float %}
    {% set R_S = params.RETRACT_SPEED|float %}
    {% set U_E_L = params.UNRETRACT_EXTRA_LENGTH|float %}
    {% set U_S = params.UNRETRACT_SPEED|float %}
    {% if SLICER=="IDEAMAKER" %}
      {% set R_S = (R_S/60)|float %}
      # {% set R_S_BISBIS = ((((R_S_BIS*1000) |float|round)|float)/1000) %}
      {% set U_S = (U_S/60)|float %}
    {% endif %}
    {% if SLICER=="CURA" %}
      M221 S100
    {% endif %}
    {% if SLICER=="PRUSA" %}
      M221 S100
    {% endif %}
    SET_RETRACTION RETRACT_LENGTH={R_L} RETRACT_SPEED={R_S} UNRETRACT_EXTRA_LENGTH={U_E_L} UNRETRACT_SPEED={U_S}

[gcode_macro MY_RETRACTION_TOWER]
description: MY_RETRACTION_TOWER START_VALUE=valeur de depart (qui commence a 1mm de hauteur) INC= valeur dincrement qui se fait tous les 2mm de hauteur
gcode:
    # {% if 'begin_z_height' in params %}{% set Z_debut = params.begin_z_height|float %}{% endif %}
    # TUNING_TOWER COMMAND=SET_RETRACTION PARAMETER=RETRACT_LENGTH START=valeur_depart SKIP=begin_z_height STEP_DELTA=inc_step STEP_HEIGHT=Hauteur_dune_bande
    {% set START_VALUE = params.START_VALUE|float %}
    {% set INC = params.INC|float %}
    TUNING_TOWER COMMAND=SET_RETRACTION PARAMETER=RETRACT_LENGTH START={START_VALUE} SKIP=1 STEP_DELTA={INC} STEP_HEIGHT=2


[gcode_macro MY_CALIPER_RETRACTION_TOWER]
description: MY_CALIPER_RETRACTION_TOWER START_VALUE=valeur_de_depart (qui commence a 1mm de hauteur) INC=increment. The value changes at a rate of factor per millimeter. The formula used is: value = start + factor * z_height, were z_height is measured from after the SKIP value (here 1mm by default)
gcode:
    # {% if 'begin_z_height' in params %}{% set Z_debut = params.begin_z_height|float %}{% endif %}
    # TUNING_TOWER COMMAND=SET_RETRACTION PARAMETER=RETRACT_LENGTH START=valeur_depart SKIP=begin_z_height FACTOR=inc_step BAND=Hauteur_dune_bande
    {% set START_VALUE = params.START_VALUE|float %}
    {% set INC = params.INC|float %}
    TUNING_TOWER COMMAND=SET_RETRACTION PARAMETER=RETRACT_LENGTH START={START_VALUE} SKIP=1 FACTOR={INC}



[gcode_arcs]
resolution: 0.1
#   An arc will be split into segments. Each segment's length will
#   equal the resolution in mm set above. Lower values will produce a
#   finer arc, but also more work for your machine. Arcs smaller than
#   the configured value will become straight lines. The default is
#   1mm.



################################################ DANS SLICER ################################################
# SET_MY_RETRACTION SLICER=PRUSA RETRACT_LENGTH={filament_retract_length[0]} RETRACT_SPEED={filament_retract_speed[0]} UNRETRACT_EXTRA_LENGTH={filament_retract_restart_extra[0]} UNRETRACT_SPEED={filament_deretract_speed[0]}
# _BEGINNING_OF_PRINT TEMP_HOTEND={temperature[0]} TEMP_BED_FIRST_LAYER={first_layer_bed_temperature[0]}
############################################### FIN DANS SLICER ##############################################




############################################## DEBUT IMPRESSION ##############################################
[gcode_macro _BEGINNING_OF_PRINT]
description: _BEGINNING_OF_PRINT TEMP_HOTEND= TEMP_BED_FIRST_LAYER=
gcode:
  {% set myvar = printer["gcode_macro MyVariables"] %}
  {% set temp_hotend = params.TEMP_HOTEND|float %}
  {% set temp_bed_first_layer = params.TEMP_BED_FIRST_LAYER|float %}
  BED_MESH_CLEAR
  SET_SKEW CLEAR=1
  SET_GCODE_OFFSET Z=0
  # HYPERLAPSE ACTION=STOP
  CANCEL_FAN_OVERRIDE
  M105 ; report temperatures
  M140 S{temp_bed_first_layer} ; set BED temp WITHOUT waiting
  # G28 STAY        # pour avoir des valeurs non abÃ©rantes au cas oÃ¹ je doive annuler l'impression ET GARDE LA SONDE ICI 
  MAGIC_BEDMESH S={temp_bed_first_layer} # ici on a drop la sonde avec le MAGIC_BEDMESH (le dernier G28 dans la macro du MAGIC_BEDMESH)
  _error_if_probe_deployed_before_print # dernier ressort pour stop tout si la probe est encore deployee
  SKEW_PROFILE LOAD=bertha
  M300 S500 P40
  G90             # absolute positioning coordinates
  M83             # relative extrusion mode
  M300 S600 P40
  G1 X{ myvar.position_heat_filament[0] } Y{ myvar.position_heat_filament[1] } F{ myvar.move_speed_beginning_printing*60|float }
  # M104 S{temp_hotend} ; set extruder temp WITHOUT waiting
  M109 S{temp_hotend} ; WAIT for extruder to reach temp before proceeding, put it before
  M300 S800 P40
  G1 Z2 F{ myvar.move_speed_z*60|float }        # lift
  _BRUSH_THE_NOZZLE
  # G1 X20 Y10 F{ myvar.move_speed_beginning_printing*60|float }
  M83
  M106 S0
  # G1 Z5 F{ myvar.move_speed_z*60|float }        # lift
  # G1 X5 Y36
  # G1 Z0.45 F{ myvar.move_speed_z*60|float }     # get ready to prime
  # G1 Y156 E30 F600   # prime nozzle
  # G1 Y186 F5000      # quick wipe ;M221 S100 ; (percentage flow)

[gcode_macro _BRUSH_THE_NOZZLE]
description: as the name says
gcode:
  {% set myvar = printer["gcode_macro MyVariables"] %}
  _error_if_probe_deployed         ;  verify that the probe is detached. is corrected error
  {% set wipe_count = myvar.brush_wipe_count|int %}
  {% set y_step_rubbing = ((myvar.position_max_brush[1]-myvar.position_min_brush[1])/(wipe_count-1))|float %}
  SAVE_GCODE_STATE NAME=clean_nozzle_state
  G90
  # G0 Z15 F300
  {% for wipe in range(wipe_count) %}
    {% for coordinate in [(myvar.position_min_brush[0]-myvar.x_offset_rubbing_on_brush),(myvar.position_max_brush[0]+myvar.x_offset_rubbing_on_brush)] %}
      G0 X{coordinate} Y{myvar.position_min_brush[1] + y_step_rubbing * wipe} F{ myvar.move_speed_brush_rubbing*60|float }
    {% endfor %}
  {% endfor %}
  G0 X{myvar.position_after_rubbing[0]} Y{myvar.position_after_rubbing[1]} F{ myvar.move_speed_brush_rubbing*60|float }
  RESTORE_GCODE_STATE NAME=clean_nozzle_state

[gcode_macro _QUICK_BRUSH]
description: as the name says
gcode:
  {% set myvar = printer["gcode_macro MyVariables"] %}
  _error_if_probe_deployed         ;  verify that the probe is detached. is corrected error
  {% set quick_wipe_count = myvar.brush_quick_wipe_count|int %}
  {% set y_step_rubbing = ((myvar.position_max_brush[1]-myvar.position_min_brush[1])/(quick_wipe_count-1))|float %}
  SAVE_GCODE_STATE NAME=clean_nozzle_state
  G90
  # G0 Z15 F300
  {% for wipe in range(quick_wipe_count) %}
    {% for coordinate in [(myvar.position_min_brush[0]-myvar.x_offset_rubbing_on_brush),(myvar.position_max_brush[0]+myvar.x_offset_rubbing_on_brush)] %}
      G0 X{coordinate} Y{myvar.position_min_brush[1] + y_step_rubbing * wipe} F{ myvar.move_speed_brush_rubbing*60|float }
    {% endfor %}
  {% endfor %}
  G0 X{myvar.position_after_rubbing[0]} Y{myvar.position_after_rubbing[1]} F{ myvar.move_speed_brush_rubbing*60|float }
  RESTORE_GCODE_STATE NAME=clean_nozzle_state



  # G0 X{ myvar.position_waiting[0] } Y{ myvar.position_waiting[1] } F{ myvar.move_speed_waiting*60|float }
  # move_speed_brush_rubbing
  # myvar.position_min_brush
  # myvar.position_max_brush
  # offset_rubbing_on_brush
  # brush_wipe_count

# [gcode_macro clean_nozzle]
# gcode:
#   {% set wipe_count = 2 %}
#   SAVE_GCODE_STATE NAME=clean_nozzle_state
#   G90
#   G0 Z15 F300
#   {% for wipe in range(wipe_count) %}
#     {% for coordinate in [(275, 4),(235, 4)] %}
#       G0 X{coordinate[0]} Y{coordinate[1] + 0.25 * wipe} Z9.7 F12000
#     {% endfor %}
#   {% endfor %}
#   RESTORE_GCODE_STATE NAME=clean_nozzle_state

[gcode_macro _AUTO_BED_MESH_CALIBRATE]
description: _AUTO_BED_MESH_CALIBRATE S={temperature du bed} [D=0, pour ne pas drop la sonde]
gcode:
  G90  # absolute positioning coordinates
  {% set S = params.S|float|round|int %}
  M190 S{S} # wait for bed to reach temperature
  Z_TILT_ADJUST D=0 # HOME all axis AND check the tilt AND KEEP THE PROBE due to the rename_existing, and keep the probe
  # G28 STAY # home all axis AND KEEP THE PROBE due to the rename_existing
  BED_MESH_CALIBRATE_ORIGINAL PROFILE=meshbed_{S}deg   # etablit la mesh pour cette temperature et le stocke dans le fichier de config
  G0 Z25 F600           # raise bed to 25
  {% if params.D is defined %}
    {% set dropoff = params.D|string %}
    {% if dropoff != "0" %}
      _EUCLID_DROPOFF
    {% endif %}
  {% else %}
    _EUCLID_DROPOFF
  {% endif %}
  SAVE_CONFIG


[gcode_macro MAGIC_BEDMESH]
description : check si la mesh a cette temperature existe, si oui elle la charge et on attend que le bed atteigne cette temperature, sinon elle va etablir la mesh a cette temperature, puis reboot. Usage : MAGIC_BEDMESH S=(temperature)
gcode:
  G90  # absolute positioning coordinates
  {% if params.S is defined %}
    {% set S = params.S|float|round|int|string %}
    {% set temp_bed = params.S|float|round|int %}
    {% if temp_bed != 0 %}
      {% set STRR = "bed_mesh meshbed_" + S + "deg" %}
      {% if printer.configfile.config[STRR] is defined %}
        M104 S100       # Start heating extruder without waiting for it
        M106 S64        # set fan at 45/255
        M190 S{S} # wait for bed to reach temperature
        Z_TILT_ADJUST D=0 # HOME all axis AND check the tilt AND KEEP THE PROBE due to the rename_existing, and keep the probe
        BED_MESH_PROFILE LOAD=meshbed_{S}deg
      {% else %}
        {action_respond_info("Pas de mesh pour cette temperature, donc lancement d'un _AUTO_BED_MESH_CALIBRATE")}
        _AUTO_BED_MESH_CALIBRATE S={S} D=0
      {% endif %}
    {% else %}
      Z_TILT_ADJUST D=0 # HOME all axis AND check the tilt AND KEEP THE PROBE due to the rename_existing, and keep the probe
    {% endif %}
    G28 # Home and drop the probe here (necessaire ici)
  {% else %}
    {action_raise_error("Merci de definir une temperature")}
  {% endif %}



############################################## FIN IMPRESSION ##############################################
